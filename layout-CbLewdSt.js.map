{"version":3,"file":"layout-CbLewdSt.js","sources":["../node_modules/lodash-es/cloneDeep.js","../node_modules/lodash-es/_baseGt.js","../node_modules/lodash-es/mapValues.js","../node_modules/lodash-es/max.js","../node_modules/lodash-es/minBy.js","../node_modules/lodash-es/_compareAscending.js","../node_modules/lodash-es/_baseOrderBy.js","../node_modules/lodash-es/_baseSortBy.js","../node_modules/lodash-es/_compareMultiple.js","../node_modules/lodash-es/pick.js","../node_modules/lodash-es/_flatRest.js","../node_modules/lodash-es/_basePick.js","../node_modules/lodash-es/_baseRange.js","../node_modules/lodash-es/range.js","../node_modules/lodash-es/_createRange.js","../node_modules/lodash-es/sortBy.js","../node_modules/lodash-es/uniqueId.js","../node_modules/dagre-d3-es/src/dagre/data/list.js","../node_modules/dagre-d3-es/src/dagre/greedy-fas.js","../node_modules/dagre-d3-es/src/dagre/acyclic.js","../node_modules/dagre-d3-es/src/dagre/util.js","../node_modules/dagre-d3-es/src/dagre/add-border-segments.js","../node_modules/dagre-d3-es/src/dagre/coordinate-system.js","../node_modules/dagre-d3-es/src/dagre/normalize.js","../node_modules/dagre-d3-es/src/dagre/rank/util.js","../node_modules/dagre-d3-es/src/dagre/rank/feasible-tree.js","../node_modules/dagre-d3-es/src/graphlib/alg/dfs.js","../node_modules/dagre-d3-es/src/dagre/rank/network-simplex.js","../node_modules/dagre-d3-es/src/graphlib/alg/postorder.js","../node_modules/dagre-d3-es/src/graphlib/alg/preorder.js","../node_modules/dagre-d3-es/src/dagre/rank/index.js","../node_modules/dagre-d3-es/src/graphlib/alg/topsort.js","../node_modules/dagre-d3-es/src/dagre/nesting-graph.js","../node_modules/dagre-d3-es/src/dagre/order/build-layer-graph.js","../node_modules/dagre-d3-es/src/dagre/order/cross-count.js","../node_modules/lodash-es/zipObject.js","../node_modules/lodash-es/_baseZipObject.js","../node_modules/dagre-d3-es/src/dagre/order/resolve-conflicts.js","../node_modules/dagre-d3-es/src/dagre/order/sort.js","../node_modules/dagre-d3-es/src/dagre/order/sort-subgraph.js","../node_modules/dagre-d3-es/src/dagre/order/barycenter.js","../node_modules/dagre-d3-es/src/dagre/order/index.js","../node_modules/dagre-d3-es/src/dagre/order/init-order.js","../node_modules/dagre-d3-es/src/dagre/order/add-subgraph-constraints.js","../node_modules/dagre-d3-es/src/dagre/parent-dummy-chains.js","../node_modules/dagre-d3-es/src/dagre/position/bk.js","../node_modules/lodash-es/forIn.js","../node_modules/dagre-d3-es/src/dagre/position/index.js","../node_modules/lodash-es/forOwn.js","../node_modules/dagre-d3-es/src/dagre/layout.js"],"sourcesContent":["import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\nexport default cloneDeep;\n","/**\n * The base implementation of `_.gt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is greater than `other`,\n *  else `false`.\n */\nfunction baseGt(value, other) {\n  return value > other;\n}\n\nexport default baseGt;\n","import baseAssignValue from './_baseAssignValue.js';\nimport baseForOwn from './_baseForOwn.js';\nimport baseIteratee from './_baseIteratee.js';\n\n/**\n * Creates an object with the same keys as `object` and values generated\n * by running each own enumerable string keyed property of `object` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, key, object).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns the new mapped object.\n * @see _.mapKeys\n * @example\n *\n * var users = {\n *   'fred':    { 'user': 'fred',    'age': 40 },\n *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n * };\n *\n * _.mapValues(users, function(o) { return o.age; });\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n *\n * // The `_.property` iteratee shorthand.\n * _.mapValues(users, 'age');\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n */\nfunction mapValues(object, iteratee) {\n  var result = {};\n  iteratee = baseIteratee(iteratee, 3);\n\n  baseForOwn(object, function(value, key, object) {\n    baseAssignValue(result, key, iteratee(value, key, object));\n  });\n  return result;\n}\n\nexport default mapValues;\n","import baseExtremum from './_baseExtremum.js';\nimport baseGt from './_baseGt.js';\nimport identity from './identity.js';\n\n/**\n * Computes the maximum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * _.max([4, 2, 8, 6]);\n * // => 8\n *\n * _.max([]);\n * // => undefined\n */\nfunction max(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseGt)\n    : undefined;\n}\n\nexport default max;\n","import baseExtremum from './_baseExtremum.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseLt from './_baseLt.js';\n\n/**\n * This method is like `_.min` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * the value is ranked. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {*} Returns the minimum value.\n * @example\n *\n * var objects = [{ 'n': 1 }, { 'n': 2 }];\n *\n * _.minBy(objects, function(o) { return o.n; });\n * // => { 'n': 1 }\n *\n * // The `_.property` iteratee shorthand.\n * _.minBy(objects, 'n');\n * // => { 'n': 1 }\n */\nfunction minBy(array, iteratee) {\n  return (array && array.length)\n    ? baseExtremum(array, baseIteratee(iteratee, 2), baseLt)\n    : undefined;\n}\n\nexport default minBy;\n","import isSymbol from './isSymbol.js';\n\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined,\n        valIsNull = value === null,\n        valIsReflexive = value === value,\n        valIsSymbol = isSymbol(value);\n\n    var othIsDefined = other !== undefined,\n        othIsNull = other === null,\n        othIsReflexive = other === other,\n        othIsSymbol = isSymbol(other);\n\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n        (valIsNull && othIsDefined && othIsReflexive) ||\n        (!valIsDefined && othIsReflexive) ||\n        !valIsReflexive) {\n      return 1;\n    }\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n        (othIsNull && valIsDefined && valIsReflexive) ||\n        (!othIsDefined && valIsReflexive) ||\n        !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\nexport default compareAscending;\n","import arrayMap from './_arrayMap.js';\nimport baseGet from './_baseGet.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseMap from './_baseMap.js';\nimport baseSortBy from './_baseSortBy.js';\nimport baseUnary from './_baseUnary.js';\nimport compareMultiple from './_compareMultiple.js';\nimport identity from './identity.js';\nimport isArray from './isArray.js';\n\n/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */\nfunction baseOrderBy(collection, iteratees, orders) {\n  if (iteratees.length) {\n    iteratees = arrayMap(iteratees, function(iteratee) {\n      if (isArray(iteratee)) {\n        return function(value) {\n          return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);\n        }\n      }\n      return iteratee;\n    });\n  } else {\n    iteratees = [identity];\n  }\n\n  var index = -1;\n  iteratees = arrayMap(iteratees, baseUnary(baseIteratee));\n\n  var result = baseMap(collection, function(value, key, collection) {\n    var criteria = arrayMap(iteratees, function(iteratee) {\n      return iteratee(value);\n    });\n    return { 'criteria': criteria, 'index': ++index, 'value': value };\n  });\n\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\n\nexport default baseOrderBy;\n","/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n */\nfunction baseSortBy(array, comparer) {\n  var length = array.length;\n\n  array.sort(comparer);\n  while (length--) {\n    array[length] = array[length].value;\n  }\n  return array;\n}\n\nexport default baseSortBy;\n","import compareAscending from './_compareAscending.js';\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\nexport default compareMultiple;\n","import basePick from './_basePick.js';\nimport flatRest from './_flatRest.js';\n\n/**\n * Creates an object composed of the picked `object` properties.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to pick.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pick(object, ['a', 'c']);\n * // => { 'a': 1, 'c': 3 }\n */\nvar pick = flatRest(function(object, paths) {\n  return object == null ? {} : basePick(object, paths);\n});\n\nexport default pick;\n","import flatten from './flatten.js';\nimport overRest from './_overRest.js';\nimport setToString from './_setToString.js';\n\n/**\n * A specialized version of `baseRest` which flattens the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @returns {Function} Returns the new function.\n */\nfunction flatRest(func) {\n  return setToString(overRest(func, undefined, flatten), func + '');\n}\n\nexport default flatRest;\n","import basePickBy from './_basePickBy.js';\nimport hasIn from './hasIn.js';\n\n/**\n * The base implementation of `_.pick` without support for individual\n * property identifiers.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @returns {Object} Returns the new object.\n */\nfunction basePick(object, paths) {\n  return basePickBy(object, paths, function(value, path) {\n    return hasIn(object, path);\n  });\n}\n\nexport default basePick;\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil,\n    nativeMax = Math.max;\n\n/**\n * The base implementation of `_.range` and `_.rangeRight` which doesn't\n * coerce arguments.\n *\n * @private\n * @param {number} start The start of the range.\n * @param {number} end The end of the range.\n * @param {number} step The value to increment or decrement by.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Array} Returns the range of numbers.\n */\nfunction baseRange(start, end, step, fromRight) {\n  var index = -1,\n      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n      result = Array(length);\n\n  while (length--) {\n    result[fromRight ? length : ++index] = start;\n    start += step;\n  }\n  return result;\n}\n\nexport default baseRange;\n","import createRange from './_createRange.js';\n\n/**\n * Creates an array of numbers (positive and/or negative) progressing from\n * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n * `start` is specified without an `end` or `step`. If `end` is not specified,\n * it's set to `start` with `start` then set to `0`.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {number} [start=0] The start of the range.\n * @param {number} end The end of the range.\n * @param {number} [step=1] The value to increment or decrement by.\n * @returns {Array} Returns the range of numbers.\n * @see _.inRange, _.rangeRight\n * @example\n *\n * _.range(4);\n * // => [0, 1, 2, 3]\n *\n * _.range(-4);\n * // => [0, -1, -2, -3]\n *\n * _.range(1, 5);\n * // => [1, 2, 3, 4]\n *\n * _.range(0, 20, 5);\n * // => [0, 5, 10, 15]\n *\n * _.range(0, -4, -1);\n * // => [0, -1, -2, -3]\n *\n * _.range(1, 4, 0);\n * // => [1, 1, 1]\n *\n * _.range(0);\n * // => []\n */\nvar range = createRange();\n\nexport default range;\n","import baseRange from './_baseRange.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport toFinite from './toFinite.js';\n\n/**\n * Creates a `_.range` or `_.rangeRight` function.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new range function.\n */\nfunction createRange(fromRight) {\n  return function(start, end, step) {\n    if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n      end = step = undefined;\n    }\n    // Ensure the sign of `-0` is preserved.\n    start = toFinite(start);\n    if (end === undefined) {\n      end = start;\n      start = 0;\n    } else {\n      end = toFinite(end);\n    }\n    step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);\n    return baseRange(start, end, step, fromRight);\n  };\n}\n\nexport default createRange;\n","import baseFlatten from './_baseFlatten.js';\nimport baseOrderBy from './_baseOrderBy.js';\nimport baseRest from './_baseRest.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Creates an array of elements, sorted in ascending order by the results of\n * running each element in a collection thru each iteratee. This method\n * performs a stable sort, that is, it preserves the original sort order of\n * equal elements. The iteratees are invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {...(Function|Function[])} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 36 },\n *   { 'user': 'fred',   'age': 30 },\n *   { 'user': 'barney', 'age': 34 }\n * ];\n *\n * _.sortBy(users, [function(o) { return o.user; }]);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]\n *\n * _.sortBy(users, ['user', 'age']);\n * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]\n */\nvar sortBy = baseRest(function(collection, iteratees) {\n  if (collection == null) {\n    return [];\n  }\n  var length = iteratees.length;\n  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n    iteratees = [];\n  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n    iteratees = [iteratees[0]];\n  }\n  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n});\n\nexport default sortBy;\n","import toString from './toString.js';\n\n/** Used to generate unique IDs. */\nvar idCounter = 0;\n\n/**\n * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {string} [prefix=''] The value to prefix the ID with.\n * @returns {string} Returns the unique ID.\n * @example\n *\n * _.uniqueId('contact_');\n * // => 'contact_104'\n *\n * _.uniqueId();\n * // => '105'\n */\nfunction uniqueId(prefix) {\n  var id = ++idCounter;\n  return toString(prefix) + id;\n}\n\nexport default uniqueId;\n","/*\n * Simple doubly linked list implementation derived from Cormen, et al.,\n * \"Introduction to Algorithms\".\n */\n\nexport { List };\n\nclass List {\n  constructor() {\n    var sentinel = {};\n    sentinel._next = sentinel._prev = sentinel;\n    this._sentinel = sentinel;\n  }\n  dequeue() {\n    var sentinel = this._sentinel;\n    var entry = sentinel._prev;\n    if (entry !== sentinel) {\n      unlink(entry);\n      return entry;\n    }\n  }\n  enqueue(entry) {\n    var sentinel = this._sentinel;\n    if (entry._prev && entry._next) {\n      unlink(entry);\n    }\n    entry._next = sentinel._next;\n    sentinel._next._prev = entry;\n    sentinel._next = entry;\n    entry._prev = sentinel;\n  }\n  toString() {\n    var strs = [];\n    var sentinel = this._sentinel;\n    var curr = sentinel._prev;\n    while (curr !== sentinel) {\n      strs.push(JSON.stringify(curr, filterOutLinks));\n      curr = curr._prev;\n    }\n    return '[' + strs.join(', ') + ']';\n  }\n}\n\nfunction unlink(entry) {\n  entry._prev._next = entry._next;\n  entry._next._prev = entry._prev;\n  delete entry._next;\n  delete entry._prev;\n}\n\nfunction filterOutLinks(k, v) {\n  if (k !== '_next' && k !== '_prev') {\n    return v;\n  }\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\nimport { List } from './data/list.js';\n\n/*\n * A greedy heuristic for finding a feedback arc set for a graph. A feedback\n * arc set is a set of edges that can be removed to make a graph acyclic.\n * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, \"A fast and\n * effective heuristic for the feedback arc set problem.\" This implementation\n * adjusts that from the paper to allow for weighted edges.\n */\nexport { greedyFAS };\n\nvar DEFAULT_WEIGHT_FN = _.constant(1);\n\nfunction greedyFAS(g, weightFn) {\n  if (g.nodeCount() <= 1) {\n    return [];\n  }\n  var state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);\n  var results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);\n\n  // Expand multi-edges\n  return _.flatten(\n    _.map(results, function (e) {\n      return g.outEdges(e.v, e.w);\n    }),\n  );\n}\n\nfunction doGreedyFAS(g, buckets, zeroIdx) {\n  var results = [];\n  var sources = buckets[buckets.length - 1];\n  var sinks = buckets[0];\n\n  var entry;\n  while (g.nodeCount()) {\n    while ((entry = sinks.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    while ((entry = sources.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    if (g.nodeCount()) {\n      for (var i = buckets.length - 2; i > 0; --i) {\n        entry = buckets[i].dequeue();\n        if (entry) {\n          results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));\n          break;\n        }\n      }\n    }\n  }\n\n  return results;\n}\n\nfunction removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {\n  var results = collectPredecessors ? [] : undefined;\n\n  _.forEach(g.inEdges(entry.v), function (edge) {\n    var weight = g.edge(edge);\n    var uEntry = g.node(edge.v);\n\n    if (collectPredecessors) {\n      results.push({ v: edge.v, w: edge.w });\n    }\n\n    uEntry.out -= weight;\n    assignBucket(buckets, zeroIdx, uEntry);\n  });\n\n  _.forEach(g.outEdges(entry.v), function (edge) {\n    var weight = g.edge(edge);\n    var w = edge.w;\n    var wEntry = g.node(w);\n    wEntry['in'] -= weight;\n    assignBucket(buckets, zeroIdx, wEntry);\n  });\n\n  g.removeNode(entry.v);\n\n  return results;\n}\n\nfunction buildState(g, weightFn) {\n  var fasGraph = new Graph();\n  var maxIn = 0;\n  var maxOut = 0;\n\n  _.forEach(g.nodes(), function (v) {\n    fasGraph.setNode(v, { v: v, in: 0, out: 0 });\n  });\n\n  // Aggregate weights on nodes, but also sum the weights across multi-edges\n  // into a single edge for the fasGraph.\n  _.forEach(g.edges(), function (e) {\n    var prevWeight = fasGraph.edge(e.v, e.w) || 0;\n    var weight = weightFn(e);\n    var edgeWeight = prevWeight + weight;\n    fasGraph.setEdge(e.v, e.w, edgeWeight);\n    maxOut = Math.max(maxOut, (fasGraph.node(e.v).out += weight));\n    maxIn = Math.max(maxIn, (fasGraph.node(e.w)['in'] += weight));\n  });\n\n  var buckets = _.range(maxOut + maxIn + 3).map(function () {\n    return new List();\n  });\n  var zeroIdx = maxIn + 1;\n\n  _.forEach(fasGraph.nodes(), function (v) {\n    assignBucket(buckets, zeroIdx, fasGraph.node(v));\n  });\n\n  return { graph: fasGraph, buckets: buckets, zeroIdx: zeroIdx };\n}\n\nfunction assignBucket(buckets, zeroIdx, entry) {\n  if (!entry.out) {\n    buckets[0].enqueue(entry);\n  } else if (!entry['in']) {\n    buckets[buckets.length - 1].enqueue(entry);\n  } else {\n    buckets[entry.out - entry['in'] + zeroIdx].enqueue(entry);\n  }\n}\n","import * as _ from 'lodash-es';\nimport { greedyFAS } from './greedy-fas.js';\n\nexport { run, undo };\n\nfunction run(g) {\n  var fas = g.graph().acyclicer === 'greedy' ? greedyFAS(g, weightFn(g)) : dfsFAS(g);\n  _.forEach(fas, function (e) {\n    var label = g.edge(e);\n    g.removeEdge(e);\n    label.forwardName = e.name;\n    label.reversed = true;\n    g.setEdge(e.w, e.v, label, _.uniqueId('rev'));\n  });\n\n  function weightFn(g) {\n    return function (e) {\n      return g.edge(e).weight;\n    };\n  }\n}\n\nfunction dfsFAS(g) {\n  var fas = [];\n  var stack = {};\n  var visited = {};\n\n  function dfs(v) {\n    if (Object.prototype.hasOwnProperty.call(visited, v)) {\n      return;\n    }\n    visited[v] = true;\n    stack[v] = true;\n    _.forEach(g.outEdges(v), function (e) {\n      if (Object.prototype.hasOwnProperty.call(stack, e.w)) {\n        fas.push(e);\n      } else {\n        dfs(e.w);\n      }\n    });\n    delete stack[v];\n  }\n\n  _.forEach(g.nodes(), dfs);\n  return fas;\n}\n\nfunction undo(g) {\n  _.forEach(g.edges(), function (e) {\n    var label = g.edge(e);\n    if (label.reversed) {\n      g.removeEdge(e);\n\n      var forwardName = label.forwardName;\n      delete label.reversed;\n      delete label.forwardName;\n      g.setEdge(e.w, e.v, label, forwardName);\n    }\n  });\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\n\nexport {\n  addDummyNode,\n  simplify,\n  asNonCompoundGraph,\n  successorWeights,\n  predecessorWeights,\n  intersectRect,\n  buildLayerMatrix,\n  normalizeRanks,\n  removeEmptyRanks,\n  addBorderNode,\n  maxRank,\n  partition,\n  time,\n  notime,\n};\n\n/*\n * Adds a dummy node to the graph and return v.\n */\nfunction addDummyNode(g, type, attrs, name) {\n  var v;\n  do {\n    v = _.uniqueId(name);\n  } while (g.hasNode(v));\n\n  attrs.dummy = type;\n  g.setNode(v, attrs);\n  return v;\n}\n\n/*\n * Returns a new graph with only simple edges. Handles aggregation of data\n * associated with multi-edges.\n */\nfunction simplify(g) {\n  var simplified = new Graph().setGraph(g.graph());\n  _.forEach(g.nodes(), function (v) {\n    simplified.setNode(v, g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    var simpleLabel = simplified.edge(e.v, e.w) || { weight: 0, minlen: 1 };\n    var label = g.edge(e);\n    simplified.setEdge(e.v, e.w, {\n      weight: simpleLabel.weight + label.weight,\n      minlen: Math.max(simpleLabel.minlen, label.minlen),\n    });\n  });\n  return simplified;\n}\n\nfunction asNonCompoundGraph(g) {\n  var simplified = new Graph({ multigraph: g.isMultigraph() }).setGraph(g.graph());\n  _.forEach(g.nodes(), function (v) {\n    if (!g.children(v).length) {\n      simplified.setNode(v, g.node(v));\n    }\n  });\n  _.forEach(g.edges(), function (e) {\n    simplified.setEdge(e, g.edge(e));\n  });\n  return simplified;\n}\n\nfunction successorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var sucs = {};\n    _.forEach(g.outEdges(v), function (e) {\n      sucs[e.w] = (sucs[e.w] || 0) + g.edge(e).weight;\n    });\n    return sucs;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\nfunction predecessorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var preds = {};\n    _.forEach(g.inEdges(v), function (e) {\n      preds[e.v] = (preds[e.v] || 0) + g.edge(e).weight;\n    });\n    return preds;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\n/*\n * Finds where a line starting at point ({x, y}) would intersect a rectangle\n * ({x, y, width, height}) if it were pointing at the rectangle's center.\n */\nfunction intersectRect(rect, point) {\n  var x = rect.x;\n  var y = rect.y;\n\n  // Rectangle intersection algorithm from:\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n  var dx = point.x - x;\n  var dy = point.y - y;\n  var w = rect.width / 2;\n  var h = rect.height / 2;\n\n  if (!dx && !dy) {\n    throw new Error('Not possible to find intersection inside of the rectangle');\n  }\n\n  var sx, sy;\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\n    // Intersection is top or bottom of rect.\n    if (dy < 0) {\n      h = -h;\n    }\n    sx = (h * dx) / dy;\n    sy = h;\n  } else {\n    // Intersection is left or right of rect.\n    if (dx < 0) {\n      w = -w;\n    }\n    sx = w;\n    sy = (w * dy) / dx;\n  }\n\n  return { x: x + sx, y: y + sy };\n}\n\n/*\n * Given a DAG with each node assigned \"rank\" and \"order\" properties, this\n * function will produce a matrix with the ids of each node.\n */\nfunction buildLayerMatrix(g) {\n  var layering = _.map(_.range(maxRank(g) + 1), function () {\n    return [];\n  });\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    var rank = node.rank;\n    if (!_.isUndefined(rank)) {\n      layering[rank][node.order] = v;\n    }\n  });\n  return layering;\n}\n\n/*\n * Adjusts the ranks for all nodes in the graph such that all nodes v have\n * rank(v) >= 0 and at least one node w has rank(w) = 0.\n */\nfunction normalizeRanks(g) {\n  var min = _.min(\n    _.map(g.nodes(), function (v) {\n      return g.node(v).rank;\n    }),\n  );\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (_.has(node, 'rank')) {\n      node.rank -= min;\n    }\n  });\n}\n\nfunction removeEmptyRanks(g) {\n  // Ranks may not start at 0, so we need to offset them\n  var offset = _.min(\n    _.map(g.nodes(), function (v) {\n      return g.node(v).rank;\n    }),\n  );\n\n  var layers = [];\n  _.forEach(g.nodes(), function (v) {\n    var rank = g.node(v).rank - offset;\n    if (!layers[rank]) {\n      layers[rank] = [];\n    }\n    layers[rank].push(v);\n  });\n\n  var delta = 0;\n  var nodeRankFactor = g.graph().nodeRankFactor;\n  _.forEach(layers, function (vs, i) {\n    if (_.isUndefined(vs) && i % nodeRankFactor !== 0) {\n      --delta;\n    } else if (delta) {\n      _.forEach(vs, function (v) {\n        g.node(v).rank += delta;\n      });\n    }\n  });\n}\n\nfunction addBorderNode(g, prefix, rank, order) {\n  var node = {\n    width: 0,\n    height: 0,\n  };\n  if (arguments.length >= 4) {\n    node.rank = rank;\n    node.order = order;\n  }\n  return addDummyNode(g, 'border', node, prefix);\n}\n\nfunction maxRank(g) {\n  return _.max(\n    _.map(g.nodes(), function (v) {\n      var rank = g.node(v).rank;\n      if (!_.isUndefined(rank)) {\n        return rank;\n      }\n    }),\n  );\n}\n\n/*\n * Partition a collection into two groups: `lhs` and `rhs`. If the supplied\n * function returns true for an entry it goes into `lhs`. Otherwise it goes\n * into `rhs.\n */\nfunction partition(collection, fn) {\n  var result = { lhs: [], rhs: [] };\n  _.forEach(collection, function (value) {\n    if (fn(value)) {\n      result.lhs.push(value);\n    } else {\n      result.rhs.push(value);\n    }\n  });\n  return result;\n}\n\n/*\n * Returns a new function that wraps `fn` with a timer. The wrapper logs the\n * time it takes to execute the function.\n */\nfunction time(name, fn) {\n  var start = _.now();\n  try {\n    return fn();\n  } finally {\n    console.log(name + ' time: ' + (_.now() - start) + 'ms');\n  }\n}\n\nfunction notime(name, fn) {\n  return fn();\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { addBorderSegments };\n\nfunction addBorderSegments(g) {\n  function dfs(v) {\n    var children = g.children(v);\n    var node = g.node(v);\n    if (children.length) {\n      _.forEach(children, dfs);\n    }\n\n    if (Object.prototype.hasOwnProperty.call(node, 'minRank')) {\n      node.borderLeft = [];\n      node.borderRight = [];\n      for (var rank = node.minRank, maxRank = node.maxRank + 1; rank < maxRank; ++rank) {\n        addBorderNode(g, 'borderLeft', '_bl', v, node, rank);\n        addBorderNode(g, 'borderRight', '_br', v, node, rank);\n      }\n    }\n  }\n\n  _.forEach(g.children(), dfs);\n}\n\nfunction addBorderNode(g, prop, prefix, sg, sgNode, rank) {\n  var label = { width: 0, height: 0, rank: rank, borderType: prop };\n  var prev = sgNode[prop][rank - 1];\n  var curr = util.addDummyNode(g, 'border', label, prefix);\n  sgNode[prop][rank] = curr;\n  g.setParent(curr, sg);\n  if (prev) {\n    g.setEdge(prev, curr, { weight: 1 });\n  }\n}\n","import * as _ from 'lodash-es';\n\nexport { adjust, undo };\n\nfunction adjust(g) {\n  var rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === 'lr' || rankDir === 'rl') {\n    swapWidthHeight(g);\n  }\n}\n\nfunction undo(g) {\n  var rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === 'bt' || rankDir === 'rl') {\n    reverseY(g);\n  }\n\n  if (rankDir === 'lr' || rankDir === 'rl') {\n    swapXY(g);\n    swapWidthHeight(g);\n  }\n}\n\nfunction swapWidthHeight(g) {\n  _.forEach(g.nodes(), function (v) {\n    swapWidthHeightOne(g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    swapWidthHeightOne(g.edge(e));\n  });\n}\n\nfunction swapWidthHeightOne(attrs) {\n  var w = attrs.width;\n  attrs.width = attrs.height;\n  attrs.height = w;\n}\n\nfunction reverseY(g) {\n  _.forEach(g.nodes(), function (v) {\n    reverseYOne(g.node(v));\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, reverseYOne);\n    if (Object.prototype.hasOwnProperty.call(edge, 'y')) {\n      reverseYOne(edge);\n    }\n  });\n}\n\nfunction reverseYOne(attrs) {\n  attrs.y = -attrs.y;\n}\n\nfunction swapXY(g) {\n  _.forEach(g.nodes(), function (v) {\n    swapXYOne(g.node(v));\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, swapXYOne);\n    if (Object.prototype.hasOwnProperty.call(edge, 'x')) {\n      swapXYOne(edge);\n    }\n  });\n}\n\nfunction swapXYOne(attrs) {\n  var x = attrs.x;\n  attrs.x = attrs.y;\n  attrs.y = x;\n}\n","/**\n * TypeScript type imports:\n *\n * @import { Graph } from '../graphlib/graph.js';\n */\nimport * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { run, undo };\n\n/*\n * Breaks any long edges in the graph into short segments that span 1 layer\n * each. This operation is undoable with the denormalize function.\n *\n * Pre-conditions:\n *\n *    1. The input graph is a DAG.\n *    2. Each node in the graph has a \"rank\" property.\n *\n * Post-condition:\n *\n *    1. All edges in the graph have a length of 1.\n *    2. Dummy nodes are added where edges have been split into segments.\n *    3. The graph is augmented with a \"dummyChains\" attribute which contains\n *       the first dummy in each chain of dummy nodes produced.\n */\nfunction run(g) {\n  g.graph().dummyChains = [];\n  _.forEach(g.edges(), function (edge) {\n    normalizeEdge(g, edge);\n  });\n}\n\n/**\n * @param {Graph} g\n */\nfunction normalizeEdge(g, e) {\n  var v = e.v;\n  var vRank = g.node(v).rank;\n  var w = e.w;\n  var wRank = g.node(w).rank;\n  var name = e.name;\n  var edgeLabel = g.edge(e);\n  var labelRank = edgeLabel.labelRank;\n\n  if (wRank === vRank + 1) return;\n\n  g.removeEdge(e);\n\n  /**\n   * @typedef {Object} Attrs\n   * @property {number} width\n   * @property {number} height\n   * @property {ReturnType<Graph[\"node\"]>} edgeLabel\n   * @property {any} edgeObj\n   * @property {ReturnType<Graph[\"node\"]>[\"rank\"]} rank\n   * @property {string} [dummy]\n   * @property {ReturnType<Graph[\"node\"]>[\"labelpos\"]} [labelpos]\n   */\n\n  /** @type {Attrs | undefined} */\n  var attrs = undefined;\n  var dummy, i;\n  for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {\n    edgeLabel.points = [];\n    attrs = {\n      width: 0,\n      height: 0,\n      edgeLabel: edgeLabel,\n      edgeObj: e,\n      rank: vRank,\n    };\n    dummy = util.addDummyNode(g, 'edge', attrs, '_d');\n    if (vRank === labelRank) {\n      attrs.width = edgeLabel.width;\n      attrs.height = edgeLabel.height;\n      attrs.dummy = 'edge-label';\n      attrs.labelpos = edgeLabel.labelpos;\n    }\n    g.setEdge(v, dummy, { weight: edgeLabel.weight }, name);\n    if (i === 0) {\n      g.graph().dummyChains.push(dummy);\n    }\n    v = dummy;\n  }\n\n  g.setEdge(v, w, { weight: edgeLabel.weight }, name);\n}\n\nfunction undo(g) {\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var origLabel = node.edgeLabel;\n    var w;\n    g.setEdge(node.edgeObj, origLabel);\n    while (node.dummy) {\n      w = g.successors(v)[0];\n      g.removeNode(v);\n      origLabel.points.push({ x: node.x, y: node.y });\n      if (node.dummy === 'edge-label') {\n        origLabel.x = node.x;\n        origLabel.y = node.y;\n        origLabel.width = node.width;\n        origLabel.height = node.height;\n      }\n      v = w;\n      node = g.node(v);\n    }\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { longestPath, slack };\n\n/*\n * Initializes ranks for the input graph using the longest path algorithm. This\n * algorithm scales well and is fast in practice, it yields rather poor\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\n * ranks wide and leaving edges longer than necessary. However, due to its\n * speed, this algorithm is good for getting an initial ranking that can be fed\n * into other algorithms.\n *\n * This algorithm does not normalize layers because it will be used by other\n * algorithms in most cases. If using this algorithm directly, be sure to\n * run normalize at the end.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG.\n *    2. Input graph node labels can be assigned properties.\n *\n * Post-conditions:\n *\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\n */\nfunction longestPath(g) {\n  var visited = {};\n\n  function dfs(v) {\n    var label = g.node(v);\n    if (Object.prototype.hasOwnProperty.call(visited, v)) {\n      return label.rank;\n    }\n    visited[v] = true;\n\n    var rank = _.min(\n      _.map(g.outEdges(v), function (e) {\n        return dfs(e.w) - g.edge(e).minlen;\n      }),\n    );\n\n    if (\n      rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3\n      rank === undefined || // return value of _.map([]) for Lodash 4\n      rank === null\n    ) {\n      // return value of _.map([null])\n      rank = 0;\n    }\n\n    return (label.rank = rank);\n  }\n\n  _.forEach(g.sources(), dfs);\n}\n\n/*\n * Returns the amount of slack for the given edge. The slack is defined as the\n * difference between the length of the edge and its minimum length.\n */\nfunction slack(g, e) {\n  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport { slack } from './util.js';\n\nexport { feasibleTree };\n\n/*\n * Constructs a spanning tree with tight edges and adjusted the input node's\n * ranks to achieve this. A tight edge is one that is has a length that matches\n * its \"minlen\" attribute.\n *\n * The basic structure for this function is derived from Gansner, et al., \"A\n * Technique for Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a DAG.\n *    2. Graph must be connected.\n *    3. Graph must have at least one node.\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\n *       respects the \"minlen\" property of incident edges.\n *    6. Graph edges must have a \"minlen\" property.\n *\n * Post-conditions:\n *\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\n *      tight.\n *\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\n * edges.\n */\nfunction feasibleTree(g) {\n  var t = new Graph({ directed: false });\n\n  // Choose arbitrary node from which to start our tree\n  var start = g.nodes()[0];\n  var size = g.nodeCount();\n  t.setNode(start, {});\n\n  var edge, delta;\n  while (tightTree(t, g) < size) {\n    edge = findMinSlackEdge(t, g);\n    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);\n    shiftRanks(t, g, delta);\n  }\n\n  return t;\n}\n\n/*\n * Finds a maximal tree of tight edges and returns the number of nodes in the\n * tree.\n */\nfunction tightTree(t, g) {\n  function dfs(v) {\n    _.forEach(g.nodeEdges(v), function (e) {\n      var edgeV = e.v,\n        w = v === edgeV ? e.w : edgeV;\n      if (!t.hasNode(w) && !slack(g, e)) {\n        t.setNode(w, {});\n        t.setEdge(v, w, {});\n        dfs(w);\n      }\n    });\n  }\n\n  _.forEach(t.nodes(), dfs);\n  return t.nodeCount();\n}\n\n/*\n * Finds the edge with the smallest slack that is incident on tree and returns\n * it.\n */\nfunction findMinSlackEdge(t, g) {\n  return _.minBy(g.edges(), function (e) {\n    if (t.hasNode(e.v) !== t.hasNode(e.w)) {\n      return slack(g, e);\n    }\n  });\n}\n\nfunction shiftRanks(t, g, delta) {\n  _.forEach(t.nodes(), function (v) {\n    g.node(v).rank += delta;\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { dfs };\n\n/*\n * A helper that preforms a pre- or post-order traversal on the input graph\n * and returns the nodes in the order they were visited. If the graph is\n * undirected then this algorithm will navigate using neighbors. If the graph\n * is directed then this algorithm will navigate using successors.\n *\n * Order must be one of \"pre\" or \"post\".\n */\nfunction dfs(g, vs, order) {\n  if (!_.isArray(vs)) {\n    vs = [vs];\n  }\n\n  var navigation = (g.isDirected() ? g.successors : g.neighbors).bind(g);\n\n  var acc = [];\n  var visited = {};\n  _.each(vs, function (v) {\n    if (!g.hasNode(v)) {\n      throw new Error('Graph does not have node: ' + v);\n    }\n\n    doDfs(g, v, order === 'post', visited, navigation, acc);\n  });\n  return acc;\n}\n\nfunction doDfs(g, v, postorder, visited, navigation, acc) {\n  if (!Object.prototype.hasOwnProperty.call(visited, v)) {\n    visited[v] = true;\n\n    if (!postorder) {\n      acc.push(v);\n    }\n    _.each(navigation(v), function (w) {\n      doDfs(g, w, postorder, visited, navigation, acc);\n    });\n    if (postorder) {\n      acc.push(v);\n    }\n  }\n}\n","import * as _ from 'lodash-es';\nimport * as alg from '../../graphlib/alg/index.js';\nimport { simplify } from '../util.js';\nimport { feasibleTree } from './feasible-tree.js';\nimport { longestPath, slack } from './util.js';\n\nexport { networkSimplex };\n\n// Expose some internals for testing purposes\nnetworkSimplex.initLowLimValues = initLowLimValues;\nnetworkSimplex.initCutValues = initCutValues;\nnetworkSimplex.calcCutValue = calcCutValue;\nnetworkSimplex.leaveEdge = leaveEdge;\nnetworkSimplex.enterEdge = enterEdge;\nnetworkSimplex.exchangeEdges = exchangeEdges;\n\n/*\n * The network simplex algorithm assigns ranks to each node in the input graph\n * and iteratively improves the ranking to reduce the length of edges.\n *\n * Preconditions:\n *\n *    1. The input graph must be a DAG.\n *    2. All nodes in the graph must have an object value.\n *    3. All edges in the graph must have \"minlen\" and \"weight\" attributes.\n *\n * Postconditions:\n *\n *    1. All nodes in the graph will have an assigned \"rank\" attribute that has\n *       been optimized by the network simplex algorithm. Ranks start at 0.\n *\n *\n * A rough sketch of the algorithm is as follows:\n *\n *    1. Assign initial ranks to each node. We use the longest path algorithm,\n *       which assigns ranks to the lowest position possible. In general this\n *       leads to very wide bottom ranks and unnecessarily long edges.\n *    2. Construct a feasible tight tree. A tight tree is one such that all\n *       edges in the tree have no slack (difference between length of edge\n *       and minlen for the edge). This by itself greatly improves the assigned\n *       rankings by shorting edges.\n *    3. Iteratively find edges that have negative cut values. Generally a\n *       negative cut value indicates that the edge could be removed and a new\n *       tree edge could be added to produce a more compact graph.\n *\n * Much of the algorithms here are derived from Gansner, et al., \"A Technique\n * for Drawing Directed Graphs.\" The structure of the file roughly follows the\n * structure of the overall algorithm.\n */\nfunction networkSimplex(g) {\n  g = simplify(g);\n  longestPath(g);\n  var t = feasibleTree(g);\n  initLowLimValues(t);\n  initCutValues(t, g);\n\n  var e, f;\n  while ((e = leaveEdge(t))) {\n    f = enterEdge(t, g, e);\n    exchangeEdges(t, g, e, f);\n  }\n}\n\n/*\n * Initializes cut values for all edges in the tree.\n */\nfunction initCutValues(t, g) {\n  var vs = alg.postorder(t, t.nodes());\n  vs = vs.slice(0, vs.length - 1);\n  _.forEach(vs, function (v) {\n    assignCutValue(t, g, v);\n  });\n}\n\nfunction assignCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  t.edge(child, parent).cutvalue = calcCutValue(t, g, child);\n}\n\n/*\n * Given the tight tree, its graph, and a child in the graph calculate and\n * return the cut value for the edge between the child and its parent.\n */\nfunction calcCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  // True if the child is on the tail end of the edge in the directed graph\n  var childIsTail = true;\n  // The graph's view of the tree edge we're inspecting\n  var graphEdge = g.edge(child, parent);\n  // The accumulated cut value for the edge between this node and its parent\n  var cutValue = 0;\n\n  if (!graphEdge) {\n    childIsTail = false;\n    graphEdge = g.edge(parent, child);\n  }\n\n  cutValue = graphEdge.weight;\n\n  _.forEach(g.nodeEdges(child), function (e) {\n    var isOutEdge = e.v === child,\n      other = isOutEdge ? e.w : e.v;\n\n    if (other !== parent) {\n      var pointsToHead = isOutEdge === childIsTail,\n        otherWeight = g.edge(e).weight;\n\n      cutValue += pointsToHead ? otherWeight : -otherWeight;\n      if (isTreeEdge(t, child, other)) {\n        var otherCutValue = t.edge(child, other).cutvalue;\n        cutValue += pointsToHead ? -otherCutValue : otherCutValue;\n      }\n    }\n  });\n\n  return cutValue;\n}\n\nfunction initLowLimValues(tree, root) {\n  if (arguments.length < 2) {\n    root = tree.nodes()[0];\n  }\n  dfsAssignLowLim(tree, {}, 1, root);\n}\n\nfunction dfsAssignLowLim(tree, visited, nextLim, v, parent) {\n  var low = nextLim;\n  var label = tree.node(v);\n\n  visited[v] = true;\n  _.forEach(tree.neighbors(v), function (w) {\n    if (!Object.prototype.hasOwnProperty.call(visited, w)) {\n      nextLim = dfsAssignLowLim(tree, visited, nextLim, w, v);\n    }\n  });\n\n  label.low = low;\n  label.lim = nextLim++;\n  if (parent) {\n    label.parent = parent;\n  } else {\n    // TODO should be able to remove this when we incrementally update low lim\n    delete label.parent;\n  }\n\n  return nextLim;\n}\n\nfunction leaveEdge(tree) {\n  return _.find(tree.edges(), function (e) {\n    return tree.edge(e).cutvalue < 0;\n  });\n}\n\nfunction enterEdge(t, g, edge) {\n  var v = edge.v;\n  var w = edge.w;\n\n  // For the rest of this function we assume that v is the tail and w is the\n  // head, so if we don't have this edge in the graph we should flip it to\n  // match the correct orientation.\n  if (!g.hasEdge(v, w)) {\n    v = edge.w;\n    w = edge.v;\n  }\n\n  var vLabel = t.node(v);\n  var wLabel = t.node(w);\n  var tailLabel = vLabel;\n  var flip = false;\n\n  // If the root is in the tail of the edge then we need to flip the logic that\n  // checks for the head and tail nodes in the candidates function below.\n  if (vLabel.lim > wLabel.lim) {\n    tailLabel = wLabel;\n    flip = true;\n  }\n\n  var candidates = _.filter(g.edges(), function (edge) {\n    return (\n      flip === isDescendant(t, t.node(edge.v), tailLabel) &&\n      flip !== isDescendant(t, t.node(edge.w), tailLabel)\n    );\n  });\n\n  return _.minBy(candidates, function (edge) {\n    return slack(g, edge);\n  });\n}\n\nfunction exchangeEdges(t, g, e, f) {\n  var v = e.v;\n  var w = e.w;\n  t.removeEdge(v, w);\n  t.setEdge(f.v, f.w, {});\n  initLowLimValues(t);\n  initCutValues(t, g);\n  updateRanks(t, g);\n}\n\nfunction updateRanks(t, g) {\n  var root = _.find(t.nodes(), function (v) {\n    return !g.node(v).parent;\n  });\n  var vs = alg.preorder(t, root);\n  vs = vs.slice(1);\n  _.forEach(vs, function (v) {\n    var parent = t.node(v).parent,\n      edge = g.edge(v, parent),\n      flipped = false;\n\n    if (!edge) {\n      edge = g.edge(parent, v);\n      flipped = true;\n    }\n\n    g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);\n  });\n}\n\n/*\n * Returns true if the edge is in the tree.\n */\nfunction isTreeEdge(tree, u, v) {\n  return tree.hasEdge(u, v);\n}\n\n/*\n * Returns true if the specified node is descendant of the root node per the\n * assigned low and lim attributes in the tree.\n */\nfunction isDescendant(tree, vLabel, rootLabel) {\n  return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;\n}\n","import { dfs } from './dfs.js';\n\nexport { postorder };\n\nfunction postorder(g, vs) {\n  return dfs(g, vs, 'post');\n}\n","import { dfs } from './dfs.js';\n\nexport { preorder };\n\nfunction preorder(g, vs) {\n  return dfs(g, vs, 'pre');\n}\n","import { feasibleTree } from './feasible-tree.js';\nimport { networkSimplex } from './network-simplex.js';\nimport { longestPath } from './util.js';\n\nexport { rank };\n\n/*\n * Assigns a rank to each node in the input graph that respects the \"minlen\"\n * constraint specified on edges between nodes.\n *\n * This basic structure is derived from Gansner, et al., \"A Technique for\n * Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a connected DAG\n *    2. Graph nodes must be objects\n *    3. Graph edges must have \"weight\" and \"minlen\" attributes\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have a \"rank\" attribute based on the results of the\n *       algorithm. Ranks can start at any index (including negative), we'll\n *       fix them up later.\n */\nfunction rank(g) {\n  switch (g.graph().ranker) {\n    case 'network-simplex':\n      networkSimplexRanker(g);\n      break;\n    case 'tight-tree':\n      tightTreeRanker(g);\n      break;\n    case 'longest-path':\n      longestPathRanker(g);\n      break;\n    default:\n      networkSimplexRanker(g);\n  }\n}\n\n// A fast and simple ranker, but results are far from optimal.\nvar longestPathRanker = longestPath;\n\nfunction tightTreeRanker(g) {\n  longestPath(g);\n  feasibleTree(g);\n}\n\nfunction networkSimplexRanker(g) {\n  networkSimplex(g);\n}\n","import * as _ from 'lodash-es';\n\nexport { topsort, CycleException };\n\ntopsort.CycleException = CycleException;\n\nfunction topsort(g) {\n  var visited = {};\n  var stack = {};\n  var results = [];\n\n  function visit(node) {\n    if (Object.prototype.hasOwnProperty.call(stack, node)) {\n      throw new CycleException();\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(visited, node)) {\n      stack[node] = true;\n      visited[node] = true;\n      _.each(g.predecessors(node), visit);\n      delete stack[node];\n      results.push(node);\n    }\n  }\n\n  _.each(g.sinks(), visit);\n\n  if (_.size(visited) !== g.nodeCount()) {\n    throw new CycleException();\n  }\n\n  return results;\n}\n\nfunction CycleException() {}\nCycleException.prototype = new Error(); // must be an instance of Error to pass testing\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { run, cleanup };\n\n/*\n * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,\n * adds appropriate edges to ensure that all cluster nodes are placed between\n * these boundries, and ensures that the graph is connected.\n *\n * In addition we ensure, through the use of the minlen property, that nodes\n * and subgraph border nodes to not end up on the same rank.\n *\n * Preconditions:\n *\n *    1. Input graph is a DAG\n *    2. Nodes in the input graph has a minlen attribute\n *\n * Postconditions:\n *\n *    1. Input graph is connected.\n *    2. Dummy nodes are added for the tops and bottoms of subgraphs.\n *    3. The minlen attribute for nodes is adjusted to ensure nodes do not\n *       get placed on the same rank as subgraph border nodes.\n *\n * The nesting graph idea comes from Sander, \"Layout of Compound Directed\n * Graphs.\"\n */\nfunction run(g) {\n  var root = util.addDummyNode(g, 'root', {}, '_root');\n  var depths = treeDepths(g);\n  var height = _.max(_.values(depths)) - 1; // Note: depths is an Object not an array\n  var nodeSep = 2 * height + 1;\n\n  g.graph().nestingRoot = root;\n\n  // Multiply minlen by nodeSep to align nodes on non-border ranks.\n  _.forEach(g.edges(), function (e) {\n    g.edge(e).minlen *= nodeSep;\n  });\n\n  // Calculate a weight that is sufficient to keep subgraphs vertically compact\n  var weight = sumWeights(g) + 1;\n\n  // Create border nodes and link them up\n  _.forEach(g.children(), function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n  });\n\n  // Save the multiplier for node layers for later removal of empty border\n  // layers.\n  g.graph().nodeRankFactor = nodeSep;\n}\n\nfunction dfs(g, root, nodeSep, weight, height, depths, v) {\n  var children = g.children(v);\n  if (!children.length) {\n    if (v !== root) {\n      g.setEdge(root, v, { weight: 0, minlen: nodeSep });\n    }\n    return;\n  }\n\n  var top = util.addBorderNode(g, '_bt');\n  var bottom = util.addBorderNode(g, '_bb');\n  var label = g.node(v);\n\n  g.setParent(top, v);\n  label.borderTop = top;\n  g.setParent(bottom, v);\n  label.borderBottom = bottom;\n\n  _.forEach(children, function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n\n    var childNode = g.node(child);\n    var childTop = childNode.borderTop ? childNode.borderTop : child;\n    var childBottom = childNode.borderBottom ? childNode.borderBottom : child;\n    var thisWeight = childNode.borderTop ? weight : 2 * weight;\n    var minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;\n\n    g.setEdge(top, childTop, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true,\n    });\n\n    g.setEdge(childBottom, bottom, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true,\n    });\n  });\n\n  if (!g.parent(v)) {\n    g.setEdge(root, top, { weight: 0, minlen: height + depths[v] });\n  }\n}\n\nfunction treeDepths(g) {\n  var depths = {};\n  function dfs(v, depth) {\n    var children = g.children(v);\n    if (children && children.length) {\n      _.forEach(children, function (child) {\n        dfs(child, depth + 1);\n      });\n    }\n    depths[v] = depth;\n  }\n  _.forEach(g.children(), function (v) {\n    dfs(v, 1);\n  });\n  return depths;\n}\n\nfunction sumWeights(g) {\n  return _.reduce(\n    g.edges(),\n    function (acc, e) {\n      return acc + g.edge(e).weight;\n    },\n    0,\n  );\n}\n\nfunction cleanup(g) {\n  var graphLabel = g.graph();\n  g.removeNode(graphLabel.nestingRoot);\n  delete graphLabel.nestingRoot;\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.nestingEdge) {\n      g.removeEdge(e);\n    }\n  });\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\n\nexport { buildLayerGraph };\n\n/*\n * Constructs a graph that can be used to sort a layer of nodes. The graph will\n * contain all base and subgraph nodes from the request layer in their original\n * hierarchy and any edges that are incident on these nodes and are of the type\n * requested by the \"relationship\" parameter.\n *\n * Nodes from the requested rank that do not have parents are assigned a root\n * node in the output graph, which is set in the root graph attribute. This\n * makes it easy to walk the hierarchy of movable nodes during ordering.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG\n *    2. Base nodes in the input graph have a rank attribute\n *    3. Subgraph nodes in the input graph has minRank and maxRank attributes\n *    4. Edges have an assigned weight\n *\n * Post-conditions:\n *\n *    1. Output graph has all nodes in the movable rank with preserved\n *       hierarchy.\n *    2. Root nodes in the movable layer are made children of the node\n *       indicated by the root attribute of the graph.\n *    3. Non-movable nodes incident on movable nodes, selected by the\n *       relationship parameter, are included in the graph (without hierarchy).\n *    4. Edges incident on movable nodes, selected by the relationship\n *       parameter, are added to the output graph.\n *    5. The weights for copied edges are aggregated as need, since the output\n *       graph is not a multi-graph.\n */\nfunction buildLayerGraph(g, rank, relationship) {\n  var root = createRootNode(g),\n    result = new Graph({ compound: true })\n      .setGraph({ root: root })\n      .setDefaultNodeLabel(function (v) {\n        return g.node(v);\n      });\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v),\n      parent = g.parent(v);\n\n    if (node.rank === rank || (node.minRank <= rank && rank <= node.maxRank)) {\n      result.setNode(v);\n      result.setParent(v, parent || root);\n\n      // This assumes we have only short edges!\n      _.forEach(g[relationship](v), function (e) {\n        var u = e.v === v ? e.w : e.v,\n          edge = result.edge(u, v),\n          weight = !_.isUndefined(edge) ? edge.weight : 0;\n        result.setEdge(u, v, { weight: g.edge(e).weight + weight });\n      });\n\n      if (Object.prototype.hasOwnProperty.call(node, 'minRank')) {\n        result.setNode(v, {\n          borderLeft: node.borderLeft[rank],\n          borderRight: node.borderRight[rank],\n        });\n      }\n    }\n  });\n\n  return result;\n}\n\nfunction createRootNode(g) {\n  var v;\n  while (g.hasNode((v = _.uniqueId('_root'))));\n  return v;\n}\n","import * as _ from 'lodash-es';\n\nexport { crossCount };\n\n/*\n * A function that takes a layering (an array of layers, each with an array of\n * ordererd nodes) and a graph and returns a weighted crossing count.\n *\n * Pre-conditions:\n *\n *    1. Input graph must be simple (not a multigraph), directed, and include\n *       only simple edges.\n *    2. Edges in the input graph must have assigned weights.\n *\n * Post-conditions:\n *\n *    1. The graph and layering matrix are left unchanged.\n *\n * This algorithm is derived from Barth, et al., \"Bilayer Cross Counting.\"\n */\nfunction crossCount(g, layering) {\n  var cc = 0;\n  for (var i = 1; i < layering.length; ++i) {\n    cc += twoLayerCrossCount(g, layering[i - 1], layering[i]);\n  }\n  return cc;\n}\n\nfunction twoLayerCrossCount(g, northLayer, southLayer) {\n  // Sort all of the edges between the north and south layers by their position\n  // in the north layer and then the south. Map these edges to the position of\n  // their head in the south layer.\n  var southPos = _.zipObject(\n    southLayer,\n    _.map(southLayer, function (v, i) {\n      return i;\n    }),\n  );\n  var southEntries = _.flatten(\n    _.map(northLayer, function (v) {\n      return _.sortBy(\n        _.map(g.outEdges(v), function (e) {\n          return { pos: southPos[e.w], weight: g.edge(e).weight };\n        }),\n        'pos',\n      );\n    }),\n  );\n\n  // Build the accumulator tree\n  var firstIndex = 1;\n  while (firstIndex < southLayer.length) firstIndex <<= 1;\n  var treeSize = 2 * firstIndex - 1;\n  firstIndex -= 1;\n  var tree = _.map(new Array(treeSize), function () {\n    return 0;\n  });\n\n  // Calculate the weighted crossings\n  var cc = 0;\n  _.forEach(\n    // @ts-expect-error\n    southEntries.forEach(function (entry) {\n      var index = entry.pos + firstIndex;\n      tree[index] += entry.weight;\n      var weightSum = 0;\n      // @ts-expect-error\n      while (index > 0) {\n        // @ts-expect-error\n        if (index % 2) {\n          weightSum += tree[index + 1];\n        }\n        // @ts-expect-error\n        index = (index - 1) >> 1;\n        tree[index] += entry.weight;\n      }\n      cc += entry.weight * weightSum;\n    }),\n  );\n\n  return cc;\n}\n","import assignValue from './_assignValue.js';\nimport baseZipObject from './_baseZipObject.js';\n\n/**\n * This method is like `_.fromPairs` except that it accepts two arrays,\n * one of property identifiers and one of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 0.4.0\n * @category Array\n * @param {Array} [props=[]] The property identifiers.\n * @param {Array} [values=[]] The property values.\n * @returns {Object} Returns the new object.\n * @example\n *\n * _.zipObject(['a', 'b'], [1, 2]);\n * // => { 'a': 1, 'b': 2 }\n */\nfunction zipObject(props, values) {\n  return baseZipObject(props || [], values || [], assignValue);\n}\n\nexport default zipObject;\n","/**\n * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n *\n * @private\n * @param {Array} props The property identifiers.\n * @param {Array} values The property values.\n * @param {Function} assignFunc The function to assign values.\n * @returns {Object} Returns the new object.\n */\nfunction baseZipObject(props, values, assignFunc) {\n  var index = -1,\n      length = props.length,\n      valsLength = values.length,\n      result = {};\n\n  while (++index < length) {\n    var value = index < valsLength ? values[index] : undefined;\n    assignFunc(result, props[index], value);\n  }\n  return result;\n}\n\nexport default baseZipObject;\n","import * as _ from 'lodash-es';\n\nexport { resolveConflicts };\n\n/*\n * Given a list of entries of the form {v, barycenter, weight} and a\n * constraint graph this function will resolve any conflicts between the\n * constraint graph and the barycenters for the entries. If the barycenters for\n * an entry would violate a constraint in the constraint graph then we coalesce\n * the nodes in the conflict into a new node that respects the contraint and\n * aggregates barycenter and weight information.\n *\n * This implementation is based on the description in Forster, \"A Fast and\n * Simple Hueristic for Constrained Two-Level Crossing Reduction,\" thought it\n * differs in some specific details.\n *\n * Pre-conditions:\n *\n *    1. Each entry has the form {v, barycenter, weight}, or if the node has\n *       no barycenter, then {v}.\n *\n * Returns:\n *\n *    A new list of entries of the form {vs, i, barycenter, weight}. The list\n *    `vs` may either be a singleton or it may be an aggregation of nodes\n *    ordered such that they do not violate constraints from the constraint\n *    graph. The property `i` is the lowest original index of any of the\n *    elements in `vs`.\n */\nfunction resolveConflicts(entries, cg) {\n  var mappedEntries = {};\n  _.forEach(entries, function (entry, i) {\n    var tmp = (mappedEntries[entry.v] = {\n      indegree: 0,\n      in: [],\n      out: [],\n      vs: [entry.v],\n      i: i,\n    });\n    if (!_.isUndefined(entry.barycenter)) {\n      // @ts-expect-error\n      tmp.barycenter = entry.barycenter;\n      // @ts-expect-error\n      tmp.weight = entry.weight;\n    }\n  });\n\n  _.forEach(cg.edges(), function (e) {\n    var entryV = mappedEntries[e.v];\n    var entryW = mappedEntries[e.w];\n    if (!_.isUndefined(entryV) && !_.isUndefined(entryW)) {\n      entryW.indegree++;\n      entryV.out.push(mappedEntries[e.w]);\n    }\n  });\n\n  var sourceSet = _.filter(mappedEntries, function (entry) {\n    // @ts-expect-error\n    return !entry.indegree;\n  });\n\n  return doResolveConflicts(sourceSet);\n}\n\nfunction doResolveConflicts(sourceSet) {\n  var entries = [];\n\n  function handleIn(vEntry) {\n    return function (uEntry) {\n      if (uEntry.merged) {\n        return;\n      }\n      if (\n        _.isUndefined(uEntry.barycenter) ||\n        _.isUndefined(vEntry.barycenter) ||\n        uEntry.barycenter >= vEntry.barycenter\n      ) {\n        mergeEntries(vEntry, uEntry);\n      }\n    };\n  }\n\n  function handleOut(vEntry) {\n    return function (wEntry) {\n      wEntry['in'].push(vEntry);\n      if (--wEntry.indegree === 0) {\n        sourceSet.push(wEntry);\n      }\n    };\n  }\n\n  while (sourceSet.length) {\n    var entry = sourceSet.pop();\n    entries.push(entry);\n    _.forEach(entry['in'].reverse(), handleIn(entry));\n    _.forEach(entry.out, handleOut(entry));\n  }\n\n  return _.map(\n    _.filter(entries, function (entry) {\n      return !entry.merged;\n    }),\n    function (entry) {\n      return _.pick(entry, ['vs', 'i', 'barycenter', 'weight']);\n    },\n  );\n}\n\nfunction mergeEntries(target, source) {\n  var sum = 0;\n  var weight = 0;\n\n  if (target.weight) {\n    sum += target.barycenter * target.weight;\n    weight += target.weight;\n  }\n\n  if (source.weight) {\n    sum += source.barycenter * source.weight;\n    weight += source.weight;\n  }\n\n  target.vs = source.vs.concat(target.vs);\n  target.barycenter = sum / weight;\n  target.weight = weight;\n  target.i = Math.min(source.i, target.i);\n  source.merged = true;\n}\n","import * as _ from 'lodash-es';\nimport * as util from '../util.js';\n\nexport { sort };\n\nfunction sort(entries, biasRight) {\n  var parts = util.partition(entries, function (entry) {\n    return Object.prototype.hasOwnProperty.call(entry, 'barycenter');\n  });\n  var sortable = parts.lhs,\n    unsortable = _.sortBy(parts.rhs, function (entry) {\n      return -entry.i;\n    }),\n    vs = [],\n    sum = 0,\n    weight = 0,\n    vsIndex = 0;\n\n  sortable.sort(compareWithBias(!!biasRight));\n\n  vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n\n  _.forEach(sortable, function (entry) {\n    vsIndex += entry.vs.length;\n    vs.push(entry.vs);\n    sum += entry.barycenter * entry.weight;\n    weight += entry.weight;\n    vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n  });\n\n  var result = { vs: _.flatten(vs) };\n  if (weight) {\n    result.barycenter = sum / weight;\n    result.weight = weight;\n  }\n  return result;\n}\n\nfunction consumeUnsortable(vs, unsortable, index) {\n  var last;\n  while (unsortable.length && (last = _.last(unsortable)).i <= index) {\n    unsortable.pop();\n    vs.push(last.vs);\n    index++;\n  }\n  return index;\n}\n\nfunction compareWithBias(bias) {\n  return function (entryV, entryW) {\n    if (entryV.barycenter < entryW.barycenter) {\n      return -1;\n    } else if (entryV.barycenter > entryW.barycenter) {\n      return 1;\n    }\n\n    return !bias ? entryV.i - entryW.i : entryW.i - entryV.i;\n  };\n}\n","import * as _ from 'lodash-es';\nimport { barycenter } from './barycenter.js';\nimport { resolveConflicts } from './resolve-conflicts.js';\nimport { sort } from './sort.js';\n\nexport { sortSubgraph };\n\nfunction sortSubgraph(g, v, cg, biasRight) {\n  var movable = g.children(v);\n  var node = g.node(v);\n  var bl = node ? node.borderLeft : undefined;\n  var br = node ? node.borderRight : undefined;\n  var subgraphs = {};\n\n  if (bl) {\n    movable = _.filter(movable, function (w) {\n      return w !== bl && w !== br;\n    });\n  }\n\n  var barycenters = barycenter(g, movable);\n  _.forEach(barycenters, function (entry) {\n    if (g.children(entry.v).length) {\n      var subgraphResult = sortSubgraph(g, entry.v, cg, biasRight);\n      subgraphs[entry.v] = subgraphResult;\n      if (Object.prototype.hasOwnProperty.call(subgraphResult, 'barycenter')) {\n        mergeBarycenters(entry, subgraphResult);\n      }\n    }\n  });\n\n  var entries = resolveConflicts(barycenters, cg);\n  expandSubgraphs(entries, subgraphs);\n\n  var result = sort(entries, biasRight);\n\n  if (bl) {\n    result.vs = _.flatten([bl, result.vs, br]);\n    if (g.predecessors(bl).length) {\n      var blPred = g.node(g.predecessors(bl)[0]),\n        brPred = g.node(g.predecessors(br)[0]);\n      if (!Object.prototype.hasOwnProperty.call(result, 'barycenter')) {\n        result.barycenter = 0;\n        result.weight = 0;\n      }\n      result.barycenter =\n        (result.barycenter * result.weight + blPred.order + brPred.order) / (result.weight + 2);\n      result.weight += 2;\n    }\n  }\n\n  return result;\n}\n\nfunction expandSubgraphs(entries, subgraphs) {\n  _.forEach(entries, function (entry) {\n    entry.vs = _.flatten(\n      entry.vs.map(function (v) {\n        if (subgraphs[v]) {\n          return subgraphs[v].vs;\n        }\n        return v;\n      }),\n    );\n  });\n}\n\nfunction mergeBarycenters(target, other) {\n  if (!_.isUndefined(target.barycenter)) {\n    target.barycenter =\n      (target.barycenter * target.weight + other.barycenter * other.weight) /\n      (target.weight + other.weight);\n    target.weight += other.weight;\n  } else {\n    target.barycenter = other.barycenter;\n    target.weight = other.weight;\n  }\n}\n","import * as _ from 'lodash-es';\n\nexport { barycenter };\n\nfunction barycenter(g, movable) {\n  return _.map(movable, function (v) {\n    var inV = g.inEdges(v);\n    if (!inV.length) {\n      return { v: v };\n    } else {\n      var result = _.reduce(\n        inV,\n        function (acc, e) {\n          var edge = g.edge(e),\n            nodeU = g.node(e.v);\n          return {\n            sum: acc.sum + edge.weight * nodeU.order,\n            weight: acc.weight + edge.weight,\n          };\n        },\n        { sum: 0, weight: 0 },\n      );\n\n      return {\n        v: v,\n        barycenter: result.sum / result.weight,\n        weight: result.weight,\n      };\n    }\n  });\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport * as util from '../util.js';\nimport { addSubgraphConstraints } from './add-subgraph-constraints.js';\nimport { buildLayerGraph } from './build-layer-graph.js';\nimport { crossCount } from './cross-count.js';\nimport { initOrder } from './init-order.js';\nimport { sortSubgraph } from './sort-subgraph.js';\n\nexport { order };\n\n/*\n * Applies heuristics to minimize edge crossings in the graph and sets the best\n * order solution as an order attribute on each node.\n *\n * Pre-conditions:\n *\n *    1. Graph must be DAG\n *    2. Graph nodes must be objects with a \"rank\" attribute\n *    3. Graph edges must have the \"weight\" attribute\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have an \"order\" attribute based on the results of the\n *       algorithm.\n */\nfunction order(g) {\n  var maxRank = util.maxRank(g),\n    downLayerGraphs = buildLayerGraphs(g, _.range(1, maxRank + 1), 'inEdges'),\n    upLayerGraphs = buildLayerGraphs(g, _.range(maxRank - 1, -1, -1), 'outEdges');\n\n  var layering = initOrder(g);\n  assignOrder(g, layering);\n\n  var bestCC = Number.POSITIVE_INFINITY,\n    best;\n\n  for (var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {\n    sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);\n\n    layering = util.buildLayerMatrix(g);\n    var cc = crossCount(g, layering);\n    if (cc < bestCC) {\n      lastBest = 0;\n      best = _.cloneDeep(layering);\n      bestCC = cc;\n    }\n  }\n\n  assignOrder(g, best);\n}\n\nfunction buildLayerGraphs(g, ranks, relationship) {\n  return _.map(ranks, function (rank) {\n    return buildLayerGraph(g, rank, relationship);\n  });\n}\n\nfunction sweepLayerGraphs(layerGraphs, biasRight) {\n  var cg = new Graph();\n  _.forEach(layerGraphs, function (lg) {\n    var root = lg.graph().root;\n    var sorted = sortSubgraph(lg, root, cg, biasRight);\n    _.forEach(sorted.vs, function (v, i) {\n      lg.node(v).order = i;\n    });\n    addSubgraphConstraints(lg, cg, sorted.vs);\n  });\n}\n\nfunction assignOrder(g, layering) {\n  _.forEach(layering, function (layer) {\n    _.forEach(layer, function (v, i) {\n      g.node(v).order = i;\n    });\n  });\n}\n","import * as _ from 'lodash-es';\n\n/*\n * Assigns an initial order value for each node by performing a DFS search\n * starting from nodes in the first rank. Nodes are assigned an order in their\n * rank as they are first visited.\n *\n * This approach comes from Gansner, et al., \"A Technique for Drawing Directed\n * Graphs.\"\n *\n * Returns a layering matrix with an array per layer and each layer sorted by\n * the order of its nodes.\n */\nexport function initOrder(g) {\n  var visited = {};\n  var simpleNodes = _.filter(g.nodes(), function (v) {\n    return !g.children(v).length;\n  });\n  var maxRank = _.max(\n    _.map(simpleNodes, function (v) {\n      return g.node(v).rank;\n    }),\n  );\n  var layers = _.map(_.range(maxRank + 1), function () {\n    return [];\n  });\n\n  function dfs(v) {\n    if (_.has(visited, v)) return;\n    visited[v] = true;\n    var node = g.node(v);\n    layers[node.rank].push(v);\n    _.forEach(g.successors(v), dfs);\n  }\n\n  var orderedVs = _.sortBy(simpleNodes, function (v) {\n    return g.node(v).rank;\n  });\n  _.forEach(orderedVs, dfs);\n\n  return layers;\n}\n","import * as _ from 'lodash-es';\n\nexport { addSubgraphConstraints };\n\nfunction addSubgraphConstraints(g, cg, vs) {\n  var prev = {},\n    rootPrev;\n\n  _.forEach(vs, function (v) {\n    var child = g.parent(v),\n      parent,\n      prevChild;\n    while (child) {\n      parent = g.parent(child);\n      if (parent) {\n        prevChild = prev[parent];\n        prev[parent] = child;\n      } else {\n        prevChild = rootPrev;\n        rootPrev = child;\n      }\n      if (prevChild && prevChild !== child) {\n        cg.setEdge(prevChild, child);\n        return;\n      }\n      child = parent;\n    }\n  });\n\n  /*\n  function dfs(v) {\n    var children = v ? g.children(v) : g.children();\n    if (children.length) {\n      var min = Number.POSITIVE_INFINITY,\n          subgraphs = [];\n      _.each(children, function(child) {\n        var childMin = dfs(child);\n        if (g.children(child).length) {\n          subgraphs.push({ v: child, order: childMin });\n        }\n        min = Math.min(min, childMin);\n      });\n      _.reduce(_.sortBy(subgraphs, \"order\"), function(prev, curr) {\n        cg.setEdge(prev.v, curr.v);\n        return curr;\n      });\n      return min;\n    }\n    return g.node(v).order;\n  }\n  dfs(undefined);\n  */\n}\n","import * as _ from 'lodash-es';\n\nexport { parentDummyChains };\n\nfunction parentDummyChains(g) {\n  var postorderNums = postorder(g);\n\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var edgeObj = node.edgeObj;\n    var pathData = findPath(g, postorderNums, edgeObj.v, edgeObj.w);\n    var path = pathData.path;\n    var lca = pathData.lca;\n    var pathIdx = 0;\n    var pathV = path[pathIdx];\n    var ascending = true;\n\n    while (v !== edgeObj.w) {\n      node = g.node(v);\n\n      if (ascending) {\n        while ((pathV = path[pathIdx]) !== lca && g.node(pathV).maxRank < node.rank) {\n          pathIdx++;\n        }\n\n        if (pathV === lca) {\n          ascending = false;\n        }\n      }\n\n      if (!ascending) {\n        while (\n          pathIdx < path.length - 1 &&\n          g.node((pathV = path[pathIdx + 1])).minRank <= node.rank\n        ) {\n          pathIdx++;\n        }\n        pathV = path[pathIdx];\n      }\n\n      g.setParent(v, pathV);\n      v = g.successors(v)[0];\n    }\n  });\n}\n\n// Find a path from v to w through the lowest common ancestor (LCA). Return the\n// full path and the LCA.\nfunction findPath(g, postorderNums, v, w) {\n  var vPath = [];\n  var wPath = [];\n  var low = Math.min(postorderNums[v].low, postorderNums[w].low);\n  var lim = Math.max(postorderNums[v].lim, postorderNums[w].lim);\n  var parent;\n  var lca;\n\n  // Traverse up from v to find the LCA\n  parent = v;\n  do {\n    parent = g.parent(parent);\n    vPath.push(parent);\n  } while (parent && (postorderNums[parent].low > low || lim > postorderNums[parent].lim));\n  lca = parent;\n\n  // Traverse from w to LCA\n  parent = w;\n  while ((parent = g.parent(parent)) !== lca) {\n    wPath.push(parent);\n  }\n\n  return { path: vPath.concat(wPath.reverse()), lca: lca };\n}\n\nfunction postorder(g) {\n  var result = {};\n  var lim = 0;\n\n  function dfs(v) {\n    var low = lim;\n    _.forEach(g.children(v), dfs);\n    result[v] = { low: low, lim: lim++ };\n  }\n  _.forEach(g.children(), dfs);\n\n  return result;\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport * as util from '../util.js';\n\n/*\n * This module provides coordinate assignment based on Brandes and Köpf, \"Fast\n * and Simple Horizontal Coordinate Assignment.\"\n */\n\nexport {\n  positionX,\n  findType1Conflicts,\n  findType2Conflicts,\n  addConflict,\n  hasConflict,\n  verticalAlignment,\n  horizontalCompaction,\n  alignCoordinates,\n  findSmallestWidthAlignment,\n  balance,\n};\n\n/*\n * Marks all edges in the graph with a type-1 conflict with the \"type1Conflict\"\n * property. A type-1 conflict is one where a non-inner segment crosses an\n * inner segment. An inner segment is an edge with both incident nodes marked\n * with the \"dummy\" property.\n *\n * This algorithm scans layer by layer, starting with the second, for type-1\n * conflicts between the current layer and the previous layer. For each layer\n * it scans the nodes from left to right until it reaches one that is incident\n * on an inner segment. It then scans predecessors to determine if they have\n * edges that cross that inner segment. At the end a final scan is done for all\n * nodes on the current rank to see if they cross the last visited inner\n * segment.\n *\n * This algorithm (safely) assumes that a dummy node will only be incident on a\n * single node in the layers being scanned.\n */\nfunction findType1Conflicts(g, layering) {\n  var conflicts = {};\n\n  function visitLayer(prevLayer, layer) {\n    var // last visited node in the previous layer that is incident on an inner\n      // segment.\n      k0 = 0,\n      // Tracks the last node in this layer scanned for crossings with a type-1\n      // segment.\n      scanPos = 0,\n      prevLayerLength = prevLayer.length,\n      lastNode = _.last(layer);\n\n    _.forEach(layer, function (v, i) {\n      var w = findOtherInnerSegmentNode(g, v),\n        k1 = w ? g.node(w).order : prevLayerLength;\n\n      if (w || v === lastNode) {\n        _.forEach(layer.slice(scanPos, i + 1), function (scanNode) {\n          _.forEach(g.predecessors(scanNode), function (u) {\n            var uLabel = g.node(u),\n              uPos = uLabel.order;\n            if ((uPos < k0 || k1 < uPos) && !(uLabel.dummy && g.node(scanNode).dummy)) {\n              addConflict(conflicts, u, scanNode);\n            }\n          });\n        });\n        // @ts-expect-error\n        scanPos = i + 1;\n        k0 = k1;\n      }\n    });\n\n    return layer;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findType2Conflicts(g, layering) {\n  var conflicts = {};\n\n  function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {\n    var v;\n    _.forEach(_.range(southPos, southEnd), function (i) {\n      v = south[i];\n      if (g.node(v).dummy) {\n        _.forEach(g.predecessors(v), function (u) {\n          var uNode = g.node(u);\n          if (uNode.dummy && (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) {\n            addConflict(conflicts, u, v);\n          }\n        });\n      }\n    });\n  }\n\n  function visitLayer(north, south) {\n    var prevNorthPos = -1,\n      nextNorthPos,\n      southPos = 0;\n\n    _.forEach(south, function (v, southLookahead) {\n      if (g.node(v).dummy === 'border') {\n        var predecessors = g.predecessors(v);\n        if (predecessors.length) {\n          nextNorthPos = g.node(predecessors[0]).order;\n          scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);\n          // @ts-expect-error\n          southPos = southLookahead;\n          prevNorthPos = nextNorthPos;\n        }\n      }\n      scan(south, southPos, south.length, nextNorthPos, north.length);\n    });\n\n    return south;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findOtherInnerSegmentNode(g, v) {\n  if (g.node(v).dummy) {\n    return _.find(g.predecessors(v), function (u) {\n      return g.node(u).dummy;\n    });\n  }\n}\n\nfunction addConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n\n  var conflictsV = conflicts[v];\n  if (!conflictsV) {\n    conflicts[v] = conflictsV = {};\n  }\n  conflictsV[w] = true;\n}\n\nfunction hasConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return !!conflicts[v] && Object.prototype.hasOwnProperty.call(conflicts[v], w);\n}\n\n/*\n * Try to align nodes into vertical \"blocks\" where possible. This algorithm\n * attempts to align a node with one of its median neighbors. If the edge\n * connecting a neighbor is a type-1 conflict then we ignore that possibility.\n * If a previous node has already formed a block with a node after the node\n * we're trying to form a block with, we also ignore that possibility - our\n * blocks would be split in that scenario.\n */\nfunction verticalAlignment(g, layering, conflicts, neighborFn) {\n  var root = {},\n    align = {},\n    pos = {};\n\n  // We cache the position here based on the layering because the graph and\n  // layering may be out of sync. The layering matrix is manipulated to\n  // generate different extreme alignments.\n  _.forEach(layering, function (layer) {\n    _.forEach(layer, function (v, order) {\n      root[v] = v;\n      align[v] = v;\n      pos[v] = order;\n    });\n  });\n\n  _.forEach(layering, function (layer) {\n    var prevIdx = -1;\n    _.forEach(layer, function (v) {\n      var ws = neighborFn(v);\n      if (ws.length) {\n        ws = _.sortBy(ws, function (w) {\n          return pos[w];\n        });\n        var mp = (ws.length - 1) / 2;\n        for (var i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i) {\n          var w = ws[i];\n          if (align[v] === v && prevIdx < pos[w] && !hasConflict(conflicts, v, w)) {\n            align[w] = v;\n            align[v] = root[v] = root[w];\n            prevIdx = pos[w];\n          }\n        }\n      }\n    });\n  });\n\n  return { root: root, align: align };\n}\n\nfunction horizontalCompaction(g, layering, root, align, reverseSep) {\n  // This portion of the algorithm differs from BK due to a number of problems.\n  // Instead of their algorithm we construct a new block graph and do two\n  // sweeps. The first sweep places blocks with the smallest possible\n  // coordinates. The second sweep removes unused space by moving blocks to the\n  // greatest coordinates without violating separation.\n  var xs = {},\n    blockG = buildBlockGraph(g, layering, root, reverseSep),\n    borderType = reverseSep ? 'borderLeft' : 'borderRight';\n\n  function iterate(setXsFunc, nextNodesFunc) {\n    var stack = blockG.nodes();\n    var elem = stack.pop();\n    var visited = {};\n    while (elem) {\n      if (visited[elem]) {\n        setXsFunc(elem);\n      } else {\n        visited[elem] = true;\n        stack.push(elem);\n        stack = stack.concat(nextNodesFunc(elem));\n      }\n\n      elem = stack.pop();\n    }\n  }\n\n  // First pass, assign smallest coordinates\n  function pass1(elem) {\n    xs[elem] = blockG.inEdges(elem).reduce(function (acc, e) {\n      return Math.max(acc, xs[e.v] + blockG.edge(e));\n    }, 0);\n  }\n\n  // Second pass, assign greatest coordinates\n  function pass2(elem) {\n    var min = blockG.outEdges(elem).reduce(function (acc, e) {\n      return Math.min(acc, xs[e.w] - blockG.edge(e));\n    }, Number.POSITIVE_INFINITY);\n\n    var node = g.node(elem);\n    if (min !== Number.POSITIVE_INFINITY && node.borderType !== borderType) {\n      xs[elem] = Math.max(xs[elem], min);\n    }\n  }\n\n  iterate(pass1, blockG.predecessors.bind(blockG));\n  iterate(pass2, blockG.successors.bind(blockG));\n\n  // Assign x coordinates to all nodes\n  _.forEach(align, function (v) {\n    xs[v] = xs[root[v]];\n  });\n\n  return xs;\n}\n\nfunction buildBlockGraph(g, layering, root, reverseSep) {\n  var blockGraph = new Graph(),\n    graphLabel = g.graph(),\n    sepFn = sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);\n\n  _.forEach(layering, function (layer) {\n    var u;\n    _.forEach(layer, function (v) {\n      var vRoot = root[v];\n      blockGraph.setNode(vRoot);\n      if (u) {\n        var uRoot = root[u],\n          prevMax = blockGraph.edge(uRoot, vRoot);\n        blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g, v, u), prevMax || 0));\n      }\n      u = v;\n    });\n  });\n\n  return blockGraph;\n}\n\n/*\n * Returns the alignment that has the smallest width of the given alignments.\n */\nfunction findSmallestWidthAlignment(g, xss) {\n  return _.minBy(_.values(xss), function (xs) {\n    var max = Number.NEGATIVE_INFINITY;\n    var min = Number.POSITIVE_INFINITY;\n\n    _.forIn(xs, function (x, v) {\n      var halfWidth = width(g, v) / 2;\n\n      max = Math.max(x + halfWidth, max);\n      min = Math.min(x - halfWidth, min);\n    });\n\n    return max - min;\n  });\n}\n\n/*\n * Align the coordinates of each of the layout alignments such that\n * left-biased alignments have their minimum coordinate at the same point as\n * the minimum coordinate of the smallest width alignment and right-biased\n * alignments have their maximum coordinate at the same point as the maximum\n * coordinate of the smallest width alignment.\n */\nfunction alignCoordinates(xss, alignTo) {\n  var alignToVals = _.values(alignTo),\n    alignToMin = _.min(alignToVals),\n    alignToMax = _.max(alignToVals);\n\n  _.forEach(['u', 'd'], function (vert) {\n    _.forEach(['l', 'r'], function (horiz) {\n      var alignment = vert + horiz,\n        xs = xss[alignment],\n        delta;\n      if (xs === alignTo) return;\n\n      var xsVals = _.values(xs);\n      delta = horiz === 'l' ? alignToMin - _.min(xsVals) : alignToMax - _.max(xsVals);\n\n      if (delta) {\n        xss[alignment] = _.mapValues(xs, function (x) {\n          return x + delta;\n        });\n      }\n    });\n  });\n}\n\nfunction balance(xss, align) {\n  return _.mapValues(xss.ul, function (ignore, v) {\n    if (align) {\n      return xss[align.toLowerCase()][v];\n    } else {\n      var xs = _.sortBy(_.map(xss, v));\n      return (xs[1] + xs[2]) / 2;\n    }\n  });\n}\n\nfunction positionX(g) {\n  var layering = util.buildLayerMatrix(g);\n  var conflicts = _.merge(findType1Conflicts(g, layering), findType2Conflicts(g, layering));\n\n  var xss = {};\n  var adjustedLayering;\n  _.forEach(['u', 'd'], function (vert) {\n    adjustedLayering = vert === 'u' ? layering : _.values(layering).reverse();\n    _.forEach(['l', 'r'], function (horiz) {\n      if (horiz === 'r') {\n        adjustedLayering = _.map(adjustedLayering, function (inner) {\n          return _.values(inner).reverse();\n        });\n      }\n\n      var neighborFn = (vert === 'u' ? g.predecessors : g.successors).bind(g);\n      var align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);\n      var xs = horizontalCompaction(g, adjustedLayering, align.root, align.align, horiz === 'r');\n      if (horiz === 'r') {\n        xs = _.mapValues(xs, function (x) {\n          return -x;\n        });\n      }\n      xss[vert + horiz] = xs;\n    });\n  });\n\n  var smallestWidth = findSmallestWidthAlignment(g, xss);\n  alignCoordinates(xss, smallestWidth);\n  return balance(xss, g.graph().align);\n}\n\nfunction sep(nodeSep, edgeSep, reverseSep) {\n  return function (g, v, w) {\n    var vLabel = g.node(v);\n    var wLabel = g.node(w);\n    var sum = 0;\n    var delta;\n\n    sum += vLabel.width / 2;\n    if (Object.prototype.hasOwnProperty.call(vLabel, 'labelpos')) {\n      switch (vLabel.labelpos.toLowerCase()) {\n        case 'l':\n          delta = -vLabel.width / 2;\n          break;\n        case 'r':\n          delta = vLabel.width / 2;\n          break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;\n    sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;\n\n    sum += wLabel.width / 2;\n    if (Object.prototype.hasOwnProperty.call(wLabel, 'labelpos')) {\n      switch (wLabel.labelpos.toLowerCase()) {\n        case 'l':\n          delta = wLabel.width / 2;\n          break;\n        case 'r':\n          delta = -wLabel.width / 2;\n          break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    return sum;\n  };\n}\n\nfunction width(g, v) {\n  return g.node(v).width;\n}\n","import baseFor from './_baseFor.js';\nimport castFunction from './_castFunction.js';\nimport keysIn from './keysIn.js';\n\n/**\n * Iterates over own and inherited enumerable string keyed properties of an\n * object and invokes `iteratee` for each property. The iteratee is invoked\n * with three arguments: (value, key, object). Iteratee functions may exit\n * iteration early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 0.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns `object`.\n * @see _.forInRight\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.forIn(new Foo, function(value, key) {\n *   console.log(key);\n * });\n * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n */\nfunction forIn(object, iteratee) {\n  return object == null\n    ? object\n    : baseFor(object, castFunction(iteratee), keysIn);\n}\n\nexport default forIn;\n","import * as _ from 'lodash-es';\nimport * as util from '../util.js';\nimport { positionX } from './bk.js';\n\nexport { position };\n\nfunction position(g) {\n  g = util.asNonCompoundGraph(g);\n\n  positionY(g);\n  _.forOwn(positionX(g), function (x, v) {\n    g.node(v).x = x;\n  });\n}\n\nfunction positionY(g) {\n  var layering = util.buildLayerMatrix(g);\n  var rankSep = g.graph().ranksep;\n  var prevY = 0;\n  _.forEach(layering, function (layer) {\n    var maxHeight = _.max(\n      _.map(layer, function (v) {\n        return g.node(v).height;\n      }),\n    );\n    _.forEach(layer, function (v) {\n      g.node(v).y = prevY + maxHeight / 2;\n    });\n    prevY += maxHeight + rankSep;\n  });\n}\n","import baseForOwn from './_baseForOwn.js';\nimport castFunction from './_castFunction.js';\n\n/**\n * Iterates over own enumerable string keyed properties of an object and\n * invokes `iteratee` for each property. The iteratee is invoked with three\n * arguments: (value, key, object). Iteratee functions may exit iteration\n * early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 0.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns `object`.\n * @see _.forOwnRight\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.forOwn(new Foo, function(value, key) {\n *   console.log(key);\n * });\n * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n */\nfunction forOwn(object, iteratee) {\n  return object && baseForOwn(object, castFunction(iteratee));\n}\n\nexport default forOwn;\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\nimport { addBorderSegments } from './add-border-segments.js';\nimport * as coordinateSystem from './coordinate-system.js';\nimport * as acyclic from './acyclic.js';\nimport * as normalize from './normalize.js';\nimport { rank } from './rank/index.js';\nimport * as nestingGraph from './nesting-graph.js';\nimport { order } from './order/index.js';\nimport { parentDummyChains } from './parent-dummy-chains.js';\nimport { position } from './position/index.js';\nimport * as util from './util.js';\n\nexport { layout };\n\nfunction layout(g, opts) {\n  var time = opts && opts.debugTiming ? util.time : util.notime;\n  time('layout', () => {\n    var layoutGraph = time('  buildLayoutGraph', () => buildLayoutGraph(g));\n    time('  runLayout', () => runLayout(layoutGraph, time));\n    time('  updateInputGraph', () => updateInputGraph(g, layoutGraph));\n  });\n}\n\nfunction runLayout(g, time) {\n  time('    makeSpaceForEdgeLabels', () => makeSpaceForEdgeLabels(g));\n  time('    removeSelfEdges', () => removeSelfEdges(g));\n  time('    acyclic', () => acyclic.run(g));\n  time('    nestingGraph.run', () => nestingGraph.run(g));\n  time('    rank', () => rank(util.asNonCompoundGraph(g)));\n  time('    injectEdgeLabelProxies', () => injectEdgeLabelProxies(g));\n  time('    removeEmptyRanks', () => util.removeEmptyRanks(g));\n  time('    nestingGraph.cleanup', () => nestingGraph.cleanup(g));\n  time('    normalizeRanks', () => util.normalizeRanks(g));\n  time('    assignRankMinMax', () => assignRankMinMax(g));\n  time('    removeEdgeLabelProxies', () => removeEdgeLabelProxies(g));\n  time('    normalize.run', () => normalize.run(g));\n  time('    parentDummyChains', () => parentDummyChains(g));\n  time('    addBorderSegments', () => addBorderSegments(g));\n  time('    order', () => order(g));\n  time('    insertSelfEdges', () => insertSelfEdges(g));\n  time('    adjustCoordinateSystem', () => coordinateSystem.adjust(g));\n  time('    position', () => position(g));\n  time('    positionSelfEdges', () => positionSelfEdges(g));\n  time('    removeBorderNodes', () => removeBorderNodes(g));\n  time('    normalize.undo', () => normalize.undo(g));\n  time('    fixupEdgeLabelCoords', () => fixupEdgeLabelCoords(g));\n  time('    undoCoordinateSystem', () => coordinateSystem.undo(g));\n  time('    translateGraph', () => translateGraph(g));\n  time('    assignNodeIntersects', () => assignNodeIntersects(g));\n  time('    reversePoints', () => reversePointsForReversedEdges(g));\n  time('    acyclic.undo', () => acyclic.undo(g));\n}\n\n/*\n * Copies final layout information from the layout graph back to the input\n * graph. This process only copies whitelisted attributes from the layout graph\n * to the input graph, so it serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction updateInputGraph(inputGraph, layoutGraph) {\n  _.forEach(inputGraph.nodes(), function (v) {\n    var inputLabel = inputGraph.node(v);\n    var layoutLabel = layoutGraph.node(v);\n\n    if (inputLabel) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n\n      if (layoutGraph.children(v).length) {\n        inputLabel.width = layoutLabel.width;\n        inputLabel.height = layoutLabel.height;\n      }\n    }\n  });\n\n  _.forEach(inputGraph.edges(), function (e) {\n    var inputLabel = inputGraph.edge(e);\n    var layoutLabel = layoutGraph.edge(e);\n\n    inputLabel.points = layoutLabel.points;\n    if (Object.prototype.hasOwnProperty.call(layoutLabel, 'x')) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n    }\n  });\n\n  inputGraph.graph().width = layoutGraph.graph().width;\n  inputGraph.graph().height = layoutGraph.graph().height;\n}\n\nvar graphNumAttrs = ['nodesep', 'edgesep', 'ranksep', 'marginx', 'marginy'];\nvar graphDefaults = { ranksep: 50, edgesep: 20, nodesep: 50, rankdir: 'tb' };\nvar graphAttrs = ['acyclicer', 'ranker', 'rankdir', 'align'];\nvar nodeNumAttrs = ['width', 'height'];\nvar nodeDefaults = { width: 0, height: 0 };\nvar edgeNumAttrs = ['minlen', 'weight', 'width', 'height', 'labeloffset'];\nvar edgeDefaults = {\n  minlen: 1,\n  weight: 1,\n  width: 0,\n  height: 0,\n  labeloffset: 10,\n  labelpos: 'r',\n};\nvar edgeAttrs = ['labelpos'];\n\n/*\n * Constructs a new graph from the input graph, which can be used for layout.\n * This process copies only whitelisted attributes from the input graph to the\n * layout graph. Thus this function serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction buildLayoutGraph(inputGraph) {\n  var g = new Graph({ multigraph: true, compound: true });\n  var graph = canonicalize(inputGraph.graph());\n\n  g.setGraph(\n    _.merge({}, graphDefaults, selectNumberAttrs(graph, graphNumAttrs), _.pick(graph, graphAttrs)),\n  );\n\n  _.forEach(inputGraph.nodes(), function (v) {\n    var node = canonicalize(inputGraph.node(v));\n    g.setNode(v, _.defaults(selectNumberAttrs(node, nodeNumAttrs), nodeDefaults));\n    g.setParent(v, inputGraph.parent(v));\n  });\n\n  _.forEach(inputGraph.edges(), function (e) {\n    var edge = canonicalize(inputGraph.edge(e));\n    g.setEdge(\n      e,\n      _.merge({}, edgeDefaults, selectNumberAttrs(edge, edgeNumAttrs), _.pick(edge, edgeAttrs)),\n    );\n  });\n\n  return g;\n}\n\n/*\n * This idea comes from the Gansner paper: to account for edge labels in our\n * layout we split each rank in half by doubling minlen and halving ranksep.\n * Then we can place labels at these mid-points between nodes.\n *\n * We also add some minimal padding to the width to push the label for the edge\n * away from the edge itself a bit.\n */\nfunction makeSpaceForEdgeLabels(g) {\n  var graph = g.graph();\n  graph.ranksep /= 2;\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    edge.minlen *= 2;\n    if (edge.labelpos.toLowerCase() !== 'c') {\n      if (graph.rankdir === 'TB' || graph.rankdir === 'BT') {\n        edge.width += edge.labeloffset;\n      } else {\n        edge.height += edge.labeloffset;\n      }\n    }\n  });\n}\n\n/*\n * Creates temporary dummy nodes that capture the rank in which each edge's\n * label is going to, if it has one of non-zero width and height. We do this\n * so that we can safely remove empty ranks while preserving balance for the\n * label's position.\n */\nfunction injectEdgeLabelProxies(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.width && edge.height) {\n      var v = g.node(e.v);\n      var w = g.node(e.w);\n      var label = { rank: (w.rank - v.rank) / 2 + v.rank, e: e };\n      util.addDummyNode(g, 'edge-proxy', label, '_ep');\n    }\n  });\n}\n\nfunction assignRankMinMax(g) {\n  var maxRank = 0;\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.borderTop) {\n      node.minRank = g.node(node.borderTop).rank;\n      node.maxRank = g.node(node.borderBottom).rank;\n      // @ts-expect-error\n      maxRank = _.max(maxRank, node.maxRank);\n    }\n  });\n  g.graph().maxRank = maxRank;\n}\n\nfunction removeEdgeLabelProxies(g) {\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.dummy === 'edge-proxy') {\n      g.edge(node.e).labelRank = node.rank;\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction translateGraph(g) {\n  var minX = Number.POSITIVE_INFINITY;\n  var maxX = 0;\n  var minY = Number.POSITIVE_INFINITY;\n  var maxY = 0;\n  var graphLabel = g.graph();\n  var marginX = graphLabel.marginx || 0;\n  var marginY = graphLabel.marginy || 0;\n\n  function getExtremes(attrs) {\n    var x = attrs.x;\n    var y = attrs.y;\n    var w = attrs.width;\n    var h = attrs.height;\n    minX = Math.min(minX, x - w / 2);\n    maxX = Math.max(maxX, x + w / 2);\n    minY = Math.min(minY, y - h / 2);\n    maxY = Math.max(maxY, y + h / 2);\n  }\n\n  _.forEach(g.nodes(), function (v) {\n    getExtremes(g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (Object.prototype.hasOwnProperty.call(edge, 'x')) {\n      getExtremes(edge);\n    }\n  });\n\n  minX -= marginX;\n  minY -= marginY;\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    node.x -= minX;\n    node.y -= minY;\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, function (p) {\n      p.x -= minX;\n      p.y -= minY;\n    });\n    if (Object.prototype.hasOwnProperty.call(edge, 'x')) {\n      edge.x -= minX;\n    }\n    if (Object.prototype.hasOwnProperty.call(edge, 'y')) {\n      edge.y -= minY;\n    }\n  });\n\n  graphLabel.width = maxX - minX + marginX;\n  graphLabel.height = maxY - minY + marginY;\n}\n\nfunction assignNodeIntersects(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    var nodeV = g.node(e.v);\n    var nodeW = g.node(e.w);\n    var p1, p2;\n    if (!edge.points) {\n      edge.points = [];\n      p1 = nodeW;\n      p2 = nodeV;\n    } else {\n      p1 = edge.points[0];\n      p2 = edge.points[edge.points.length - 1];\n    }\n    edge.points.unshift(util.intersectRect(nodeV, p1));\n    edge.points.push(util.intersectRect(nodeW, p2));\n  });\n}\n\nfunction fixupEdgeLabelCoords(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (Object.prototype.hasOwnProperty.call(edge, 'x')) {\n      if (edge.labelpos === 'l' || edge.labelpos === 'r') {\n        edge.width -= edge.labeloffset;\n      }\n      switch (edge.labelpos) {\n        case 'l':\n          edge.x -= edge.width / 2 + edge.labeloffset;\n          break;\n        case 'r':\n          edge.x += edge.width / 2 + edge.labeloffset;\n          break;\n      }\n    }\n  });\n}\n\nfunction reversePointsForReversedEdges(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.reversed) {\n      edge.points.reverse();\n    }\n  });\n}\n\nfunction removeBorderNodes(g) {\n  _.forEach(g.nodes(), function (v) {\n    if (g.children(v).length) {\n      var node = g.node(v);\n      var t = g.node(node.borderTop);\n      var b = g.node(node.borderBottom);\n      var l = g.node(_.last(node.borderLeft));\n      var r = g.node(_.last(node.borderRight));\n\n      node.width = Math.abs(r.x - l.x);\n      node.height = Math.abs(b.y - t.y);\n      node.x = l.x + node.width / 2;\n      node.y = t.y + node.height / 2;\n    }\n  });\n\n  _.forEach(g.nodes(), function (v) {\n    if (g.node(v).dummy === 'border') {\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction removeSelfEdges(g) {\n  _.forEach(g.edges(), function (e) {\n    if (e.v === e.w) {\n      var node = g.node(e.v);\n      if (!node.selfEdges) {\n        node.selfEdges = [];\n      }\n      node.selfEdges.push({ e: e, label: g.edge(e) });\n      g.removeEdge(e);\n    }\n  });\n}\n\nfunction insertSelfEdges(g) {\n  var layers = util.buildLayerMatrix(g);\n  _.forEach(layers, function (layer) {\n    var orderShift = 0;\n    _.forEach(layer, function (v, i) {\n      var node = g.node(v);\n      node.order = i + orderShift;\n      _.forEach(node.selfEdges, function (selfEdge) {\n        util.addDummyNode(\n          g,\n          'selfedge',\n          {\n            width: selfEdge.label.width,\n            height: selfEdge.label.height,\n            rank: node.rank,\n            order: i + ++orderShift,\n            e: selfEdge.e,\n            label: selfEdge.label,\n          },\n          '_se',\n        );\n      });\n      delete node.selfEdges;\n    });\n  });\n}\n\nfunction positionSelfEdges(g) {\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.dummy === 'selfedge') {\n      var selfNode = g.node(node.e.v);\n      var x = selfNode.x + selfNode.width / 2;\n      var y = selfNode.y;\n      var dx = node.x - x;\n      var dy = selfNode.height / 2;\n      g.setEdge(node.e, node.label);\n      g.removeNode(v);\n      node.label.points = [\n        { x: x + (2 * dx) / 3, y: y - dy },\n        { x: x + (5 * dx) / 6, y: y - dy },\n        { x: x + dx, y: y },\n        { x: x + (5 * dx) / 6, y: y + dy },\n        { x: x + (2 * dx) / 3, y: y + dy },\n      ];\n      node.label.x = node.x;\n      node.label.y = node.y;\n    }\n  });\n}\n\nfunction selectNumberAttrs(obj, attrs) {\n  return _.mapValues(_.pick(obj, attrs), Number);\n}\n\nfunction canonicalize(attrs) {\n  var newAttrs = {};\n  _.forEach(attrs, function (v, k) {\n    newAttrs[k.toLowerCase()] = v;\n  });\n  return newAttrs;\n}\n"],"names":["cloneDeep","value","baseClone","CLONE_DEEP_FLAG","baseGt","other","mapValues","object","iteratee","result","baseIteratee","baseForOwn","key","baseAssignValue","max","array","length","baseExtremum","identity","undefined","minBy","baseLt","compareAscending","valIsDefined","valIsNull","valIsReflexive","valIsSymbol","isSymbol","othIsDefined","othIsNull","othIsReflexive","othIsSymbol","baseOrderBy","collection","iteratees","orders","arrayMap","isArray","baseGet","index","baseUnary","comparer","sort","baseSortBy","baseMap","criteria","objCriteria","othCriteria","ordersLength","compareMultiple","func","pick","setToString","overRest","paths","basePickBy","path","hasIn","basePick","flatten","nativeCeil","Math","ceil","nativeMax","range","start","end","step","isIterateeCall","toFinite","Array","baseRange","sortBy","baseRest","baseFlatten","idCounter","uniqueId","prefix","id","toString","List","constructor","sentinel","_next","_prev","this","_sentinel","dequeue","entry","unlink","enqueue","strs","curr","push","JSON","stringify","filterOutLinks","join","k","v","DEFAULT_WEIGHT_FN","_.constant","greedyFAS","g","weightFn","nodeCount","state","fasGraph","Graph","maxIn","maxOut","_.forEach","nodes","setNode","in","out","edges","e","prevWeight","edge","w","weight","edgeWeight","setEdge","node","buckets","_.range","map","zeroIdx","assignBucket","graph","buildState","results","sources","sinks","removeNode","i","concat","doGreedyFAS","_.flatten","_.map","outEdges","collectPredecessors","inEdges","uEntry","wEntry","run","fas","acyclicer","stack","visited","dfs","Object","prototype","hasOwnProperty","call","dfsFAS","label","removeEdge","forwardName","name","reversed","_.uniqueId","addDummyNode","type","attrs","hasNode","dummy","asNonCompoundGraph","simplified","multigraph","isMultigraph","setGraph","children","intersectRect","rect","point","sx","sy","x","y","dx","dy","width","h","height","Error","abs","buildLayerMatrix","layering","maxRank","rank","_.isUndefined","order","addBorderNode","arguments","_.max","notime","fn","prop","sg","sgNode","borderType","prev","util.addDummyNode","setParent","undo","rankDir","rankdir","toLowerCase","reverseYOne","points","reverseY","swapXYOne","swapXY","swapWidthHeight","swapWidthHeightOne","dummyChains","vRank","wRank","edgeLabel","labelRank","edgeObj","labelpos","normalizeEdge","longestPath","_.min","minlen","Number","POSITIVE_INFINITY","slack","feasibleTree","delta","t","directed","size","tightTree","findMinSlackEdge","shiftRanks","nodeEdges","edgeV","_.minBy","vs","_.isArray","navigation","isDirected","successors","neighbors","bind","acc","_.each","doDfs","postorder","networkSimplex","simpleLabel","simplify","initLowLimValues","initCutValues","leaveEdge","exchangeEdges","enterEdge","alg.postorder","slice","child","childLab","parent","cutvalue","calcCutValue","assignCutValue","childIsTail","graphEdge","cutValue","u","isOutEdge","pointsToHead","otherWeight","hasEdge","otherCutValue","tree","root","dfsAssignLowLim","nextLim","low","lim","_.find","vLabel","wLabel","tailLabel","flip","candidates","_.filter","isDescendant","f","alg.preorder","flipped","updateRanks","rootLabel","ranker","networkSimplexRanker","tightTreeRanker","longestPathRanker","depths","depth","treeDepths","_.values","nodeSep","nestingRoot","_.reduce","sumWeights","nodeRankFactor","top","util.addBorderNode","bottom","borderTop","borderBottom","childNode","childTop","childBottom","thisWeight","nestingEdge","buildLayerGraph","relationship","createRootNode","compound","setDefaultNodeLabel","minRank","borderLeft","borderRight","crossCount","cc","twoLayerCrossCount","northLayer","southLayer","southPos","props","values","assignFunc","valsLength","baseZipObject","assignValue","_.zipObject","southEntries","_.sortBy","pos","firstIndex","treeSize","forEach","weightSum","resolveConflicts","entries","cg","mappedEntries","tmp","indegree","barycenter","entryV","entryW","sourceSet","handleIn","vEntry","merged","target","source","sum","min","mergeEntries","handleOut","pop","reverse","_.pick","doResolveConflicts","biasRight","bias","parts","lhs","rhs","util.partition","sortable","unsortable","vsIndex","consumeUnsortable","last","_.last","sortSubgraph","movable","bl","br","subgraphs","barycenters","inV","nodeU","subgraphResult","expandSubgraphs","predecessors","blPred","brPred","util.maxRank","downLayerGraphs","buildLayerGraphs","upLayerGraphs","simpleNodes","layers","orderedVs","_.has","initOrder","assignOrder","best","bestCC","lastBest","sweepLayerGraphs","util.buildLayerMatrix","_.cloneDeep","ranks","layerGraphs","lg","sorted","rootPrev","prevChild","addSubgraphConstraints","layer","parentDummyChains","postorderNums","pathData","lca","vPath","wPath","findPath","pathIdx","pathV","ascending","findType1Conflicts","conflicts","prevLayer","k0","scanPos","prevLayerLength","lastNode","findOtherInnerSegmentNode","k1","scanNode","uLabel","uPos","addConflict","conflictsV","hasConflict","horizontalCompaction","align","reverseSep","xs","blockG","blockGraph","graphLabel","sepFn","edgeSep","sep","nodesep","edgesep","vRoot","uRoot","prevMax","buildBlockGraph","iterate","setXsFunc","nextNodesFunc","elem","reduce","findSmallestWidthAlignment","xss","NEGATIVE_INFINITY","halfWidth","baseFor","castFunction","keysIn","positionX","adjustedLayering","_.merge","scan","south","southEnd","prevNorthBorder","nextNorthBorder","uNode","north","nextNorthPos","prevNorthPos","southLookahead","findType2Conflicts","vert","horiz","inner","neighborFn","prevIdx","ws","mp","floor","il","verticalAlignment","_.mapValues","smallestWidth","alignTo","alignToVals","alignToMin","alignToMax","alignment","xsVals","alignCoordinates","ul","ignore","balance","position","rankSep","ranksep","prevY","maxHeight","positionY","util.asNonCompoundGraph","layout","opts","time","util.notime","layoutGraph","inputGraph","canonicalize","graphDefaults","selectNumberAttrs","graphNumAttrs","graphAttrs","_.defaults","nodeNumAttrs","nodeDefaults","edgeDefaults","edgeNumAttrs","edgeAttrs","buildLayoutGraph","labeloffset","makeSpaceForEdgeLabels","selfEdges","removeSelfEdges","acyclic.run","nestingGraph.run","injectEdgeLabelProxies","offset","util.removeEmptyRanks","nestingGraph.cleanup","util.normalizeRanks","assignRankMinMax","removeEdgeLabelProxies","normalize.run","addBorderSegments","orderShift","selfEdge","insertSelfEdges","coordinateSystem.adjust","selfNode","positionSelfEdges","b","l","r","removeBorderNodes","origLabel","normalize.undo","fixupEdgeLabelCoords","coordinateSystem.undo","minX","maxX","minY","maxY","marginX","marginx","marginY","marginy","getExtremes","p","translateGraph","p1","p2","nodeV","nodeW","unshift","util.intersectRect","assignNodeIntersects","reversePointsForReversedEdges","acyclic.undo","runLayout","inputLabel","layoutLabel","updateInputGraph","obj","newAttrs"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49]}