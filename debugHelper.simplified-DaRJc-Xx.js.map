{"version":3,"mappings":";2EASO,MAAMA,EAMX,+BAAaC,CAAmBC,EAAgB,IAG9C,IACE,MAAMC,YAAEA,SAAgBC,EAAAC,UAAA,MAAAF,qBAAMG,OAAO,8BAAgCC,KAAAC,KAAAC,IAAA,OAAAN,gBAAAO,0BACrE,aAAaP,EAAYQ,yBAAyBT,EACpD,OAASU,GAEP,MAAO,CAAEA,MAAO,uCAClB,CACF,CAMA,6BAAaC,CAAiBX,EAAgB,IAG5C,IACE,MAAMC,YAAEA,SAAgBC,EAAAC,UAAA,MAAAF,qBAAMG,OAAO,8BAAgCC,KAAAC,KAAAC,IAAA,OAAAN,gBAAAO,0BACrE,aAAaP,EAAYU,iBAAiBX,EAC5C,OAASU,GAEP,MAAO,EACT,CACF,CAKA,8BAAaE,GAGX,IACE,MAAMX,YAAEA,SAAgBC,EAAAC,UAAA,MAAAF,qBAAMG,OAAO,8BAAgCC,KAAAC,KAAAC,IAAA,OAAAN,gBAAAO,0BACrE,aAAaP,EAAYW,mBAC3B,OAASF,GAEP,MAAO,EACT,CACF,CAOA,+BAAaG,CAAmBC,EAAuBd,EAAgB,IAGrE,IACE,MAAMC,YAAEA,SAAgBC,EAAAC,UAAA,MAAAF,qBAAMG,OAAO,8BAAgCC,KAAAC,KAAAC,IAAA,OAAAN,gBAAAO,0BACrE,aAAaP,EAAYc,qBAAqBD,EAAed,EAC/D,OAASU,GAEP,MAAO,EACT,CACF,CAKA,6BAAaM,GAGX,IACE,MAAMf,YAAEA,SAAgBC,EAAAC,UAAA,MAAAF,qBAAMG,OAAO,8BAAgCC,KAAAC,KAAAC,IAAA,OAAAN,gBAAAO,2BAE9DS,EAAUC,EAAUC,SAAgBC,QAAQC,IAAI,CACrDpB,EAAYW,oBACZX,EAAYU,iBAAiB,GAC7BV,EAAYqB,gBAAgB,EAAG,OAGjC,MAAO,CACLC,cAAeN,EAASO,OAAS,EAAI,WAAa,UAClDC,eAAgBR,EAASO,OACzBE,cAAeR,EAASM,OACxBG,gBAAiBR,EAAOK,OACxBI,WAAA,IAAeC,MAAOC,cAE1B,OAASpB,GAEP,MAAO,CACLa,cAAe,UACfb,MAAO,uCAEX,CACF,CAKA,4BAAOqB,GACL,IACE,MAAMC,EAASC,aAAaC,QAAQ,kBACpC,OAAOF,EAASG,KAAKC,MAAMJ,GAAU,EACvC,OAAStB,GAEP,MAAO,EACT,CACF,EAiBF,SAAS2B,IAENC,OAAeC,YAAczC,EAG7BwC,OAAeE,UAAaxC,GAAmBF,EAAkBC,mBAAmBC,GACpFsC,OAAeG,YAAc,IAAM3C,EAAkBc,oBACrD0B,OAAeI,YAAe1C,GAAmBF,EAAkBa,iBAAiBX,GACpFsC,OAAeK,YAAc,IAAM7C,EAAkBkB,mBACrDsB,OAAeM,eAAiB,CAACC,EAAc7C,IAAmBF,EAAkBe,mBAAmBgC,EAAM7C,GAC7GsC,OAAeQ,eAAiB,IAAMhD,EAAkBiC,uBAW3D,CA/BsB,oBAAXO,SAEmB,YAAxBS,SAASC,WACXD,SAASE,iBAAiB,mBAAoBZ,GAG9CA","names":["ClaudeDebugHelper","getFullErrorReport","hours","errorLogger","__vitePreload","async","import","then","n","bC","__VITE_PRELOAD__","exportErrorsForDebugging","error","getErrorPatterns","getCriticalErrors","getComponentErrors","componentName","getErrorsByComponent","quickHealthCheck","critical","patterns","recent","Promise","all","getRecentErrors","health_status","length","critical_count","pattern_count","total_errors_6h","timestamp","Date","toISOString","getLocalStorageErrors","stored","localStorage","getItem","JSON","parse","setupGlobalDebugHelpers","window","claudeDebug","getErrors","getCritical","getPatterns","healthCheck","debugComponent","name","getLocalErrors","document","readyState","addEventListener"],"ignoreList":[],"sources":["../src/utils/debugHelper.simplified.ts"],"sourcesContent":["/**\r\n * Simplified Debug Helper for Claude Code Access\r\n * This version avoids circular dependencies by using dynamic imports\r\n */\r\n\r\n/**\r\n * Main debug interface for Claude Code\r\n * Use this to quickly access error information for debugging\r\n */\r\nexport class ClaudeDebugHelper {\r\n  \r\n  /**\r\n   * Get comprehensive error export for debugging\r\n   * @param hours - Number of hours to look back (default: 24)\r\n   */\r\n  static async getFullErrorReport(hours: number = 24) {\r\n    console.log(`üîç Generating full error report for last ${hours} hours...`);\r\n    \r\n    try {\r\n      const { errorLogger } = await import('@/services/ErrorLoggingService');\r\n      return await errorLogger.exportErrorsForDebugging(hours);\r\n    } catch (error) {\r\n      console.error('Failed to get error report:', error);\r\n      return { error: 'Failed to load error logging service' };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get error patterns for trend analysis\r\n   * @param hours - Number of hours to look back (default: 24)\r\n   */\r\n  static async getErrorPatterns(hours: number = 24) {\r\n    console.log(`üìä Analyzing error patterns for last ${hours} hours...`);\r\n    \r\n    try {\r\n      const { errorLogger } = await import('@/services/ErrorLoggingService');\r\n      return await errorLogger.getErrorPatterns(hours);\r\n    } catch (error) {\r\n      console.error('Failed to get error patterns:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get critical errors that need immediate attention\r\n   */\r\n  static async getCriticalErrors() {\r\n    console.log('üö® Fetching critical errors...');\r\n    \r\n    try {\r\n      const { errorLogger } = await import('@/services/ErrorLoggingService');\r\n      return await errorLogger.getCriticalErrors();\r\n    } catch (error) {\r\n      console.error('Failed to get critical errors:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get errors for a specific component\r\n   * @param componentName - Name of the component to analyze\r\n   * @param hours - Number of hours to look back (default: 24)\r\n   */\r\n  static async getComponentErrors(componentName: string, hours: number = 24) {\r\n    console.log(`üîß Analyzing errors for component: ${componentName}`);\r\n    \r\n    try {\r\n      const { errorLogger } = await import('@/services/ErrorLoggingService');\r\n      return await errorLogger.getErrorsByComponent(componentName, hours);\r\n    } catch (error) {\r\n      console.error('Failed to get component errors:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Quick health check - get summary of recent issues\r\n   */\r\n  static async quickHealthCheck() {\r\n    console.log('üè• Performing quick health check...');\r\n    \r\n    try {\r\n      const { errorLogger } = await import('@/services/ErrorLoggingService');\r\n      \r\n      const [critical, patterns, recent] = await Promise.all([\r\n        errorLogger.getCriticalErrors(),\r\n        errorLogger.getErrorPatterns(6), // Last 6 hours for patterns\r\n        errorLogger.getRecentErrors(6, 100)  // Last 6 hours for recent\r\n      ]);\r\n\r\n      return {\r\n        health_status: critical.length > 0 ? 'CRITICAL' : 'HEALTHY',\r\n        critical_count: critical.length,\r\n        pattern_count: patterns.length,\r\n        total_errors_6h: recent.length,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n    } catch (error) {\r\n      console.error('Failed to perform health check:', error);\r\n      return {\r\n        health_status: 'UNKNOWN',\r\n        error: 'Failed to load error logging service'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get local storage errors (always available)\r\n   */\r\n  static getLocalStorageErrors(): any[] {\r\n    try {\r\n      const stored = localStorage.getItem('asr_error_logs');\r\n      return stored ? JSON.parse(stored) : [];\r\n    } catch (error) {\r\n      console.error('Failed to read local storage errors:', error);\r\n      return [];\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Global debug functions for easy access in browser console\r\n * These are defined after DOMContentLoaded to ensure proper initialization\r\n */\r\nif (typeof window !== 'undefined') {\r\n  // Wait for DOM to be ready before setting up global helpers\r\n  if (document.readyState === 'loading') {\r\n    document.addEventListener('DOMContentLoaded', setupGlobalDebugHelpers);\r\n  } else {\r\n    // DOM is already ready\r\n    setupGlobalDebugHelpers();\r\n  }\r\n}\r\n\r\nfunction setupGlobalDebugHelpers() {\r\n  // Make debug helper available globally for browser console access\r\n  (window as any).claudeDebug = ClaudeDebugHelper;\r\n  \r\n  // Convenience functions\r\n  (window as any).getErrors = (hours?: number) => ClaudeDebugHelper.getFullErrorReport(hours);\r\n  (window as any).getCritical = () => ClaudeDebugHelper.getCriticalErrors();\r\n  (window as any).getPatterns = (hours?: number) => ClaudeDebugHelper.getErrorPatterns(hours);\r\n  (window as any).healthCheck = () => ClaudeDebugHelper.quickHealthCheck();\r\n  (window as any).debugComponent = (name: string, hours?: number) => ClaudeDebugHelper.getComponentErrors(name, hours);\r\n  (window as any).getLocalErrors = () => ClaudeDebugHelper.getLocalStorageErrors();\r\n  \r\n  console.log('üõ†Ô∏è Claude Debug Helper loaded. Available commands:');\r\n  console.log('  - claudeDebug.getFullErrorReport(hours)');\r\n  console.log('  - claudeDebug.getCriticalErrors()');\r\n  console.log('  - claudeDebug.quickHealthCheck()');\r\n  console.log('  - claudeDebug.getComponentErrors(name, hours)');\r\n  console.log('  - getErrors(hours) // Shortcut');\r\n  console.log('  - getCritical() // Shortcut');\r\n  console.log('  - healthCheck() // Shortcut');\r\n  console.log('  - getLocalErrors() // Shortcut');\r\n}\r\n\r\nexport default ClaudeDebugHelper;"],"file":"debugHelper.simplified-DaRJc-Xx.js"}