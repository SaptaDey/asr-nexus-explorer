version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: asr-got-db
    environment:
      POSTGRES_DB: asr_nexus_db
      POSTGRES_USER: asr_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - asr-got-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U asr_user -d asr_nexus_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for session storage (optional)
  redis:
    image: redis:7-alpine
    container_name: asr-got-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - asr-got-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ASR-GoT Backend
  backend:
    build: .
    container_name: asr-got-backend
    environment:
      DATABASE_URL: postgresql://asr_user:${DB_PASSWORD:-secure_password_123}@postgres:5432/asr_nexus_db
      PORT: 3001
      NODE_ENV: production
      CORS_ORIGIN: https://scientific-research.online
      SESSION_SECRET: ${SESSION_SECRET:-your_very_long_random_session_secret_here}
      ENABLE_METRICS: true
      LOG_LEVEL: info
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - asr-got-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (optional for local deployment)
  nginx:
    image: nginx:alpine
    container_name: asr-got-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - asr-got-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  asr-got-network:
    driver: bridge