name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '20'
  CACHE_NAME: node-modules-v1

jobs:
  # Lint and type checking
  lint-and-types:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npm run type-check

  # Unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run unit tests with coverage
        run: npm run test:unit -- --coverage --reporter=verbose
        env:
          NODE_ENV: test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unit-tests
          name: codecov-unit-tests
          fail_ci_if_error: true

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      # Mock Supabase for testing
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          VITE_SUPABASE_URL: http://localhost:3000
          VITE_SUPABASE_ANON_KEY: test-key
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: test-results/
          retention-days: 7

  # Security tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run security tests
        run: npm run test:security
        env:
          NODE_ENV: test

      - name: Run npm audit
        run: npm audit --audit-level high

      - name: Upload security test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-test-results
          path: test-results/security/
          retention-days: 30

  # Performance tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run performance tests
        run: npm run test:performance
        env:
          NODE_ENV: test

      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: test-results/performance/
          retention-days: 14

  # End-to-End tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build production app
        run: npm run build
        env:
          NODE_ENV: production
          NODE_OPTIONS: "--max-old-space-size=4096"

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          NODE_ENV: test
          # Use mock API credentials for E2E tests
          VITE_SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL || 'https://test.supabase.co' }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.TEST_SUPABASE_ANON_KEY || 'test-anon-key' }}

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            playwright-report/
            test-results/
          retention-days: 14

      - name: Upload E2E screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-screenshots
          path: test-results/**/*.png
          retention-days: 7

  # Coverage report
  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [unit-tests, integration-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Generate comprehensive coverage
        run: npm run test:coverage
        env:
          NODE_ENV: test

      - name: Coverage Report Comment
        uses: romeovs/lcov-reporter-action@v0.3.1
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./coverage/lcov.info
          delete-old-comments: true

      - name: Check coverage thresholds
        run: |
          # Extract coverage percentages
          LINES=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          FUNCTIONS=$(cat coverage/coverage-summary.json | jq '.total.functions.pct')
          BRANCHES=$(cat coverage/coverage-summary.json | jq '.total.branches.pct')
          STATEMENTS=$(cat coverage/coverage-summary.json | jq '.total.statements.pct')
          
          echo "Coverage Report:"
          echo "Lines: ${LINES}%"
          echo "Functions: ${FUNCTIONS}%"
          echo "Branches: ${BRANCHES}%"
          echo "Statements: ${STATEMENTS}%"
          
          # Fail if any coverage is below threshold
          if (( $(echo "$LINES < 75" | bc -l) )); then
            echo "❌ Line coverage ${LINES}% is below threshold (75%)"
            exit 1
          fi
          
          if (( $(echo "$FUNCTIONS < 70" | bc -l) )); then
            echo "❌ Function coverage ${FUNCTIONS}% is below threshold (70%)"
            exit 1
          fi
          
          if (( $(echo "$BRANCHES < 70" | bc -l) )); then
            echo "❌ Branch coverage ${BRANCHES}% is below threshold (70%)"
            exit 1
          fi
          
          if (( $(echo "$STATEMENTS < 75" | bc -l) )); then
            echo "❌ Statement coverage ${STATEMENTS}% is below threshold (75%)"
            exit 1
          fi
          
          echo "✅ All coverage thresholds met!"

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 30

  # Build test
  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build production
        run: npm run build
        env:
          NODE_ENV: production
          NODE_OPTIONS: "--max-old-space-size=4096"

      - name: Build development
        run: npm run build:dev
        env:
          NODE_ENV: development
          NODE_OPTIONS: "--max-old-space-size=4096"

      - name: Test production build
        run: |
          npm run preview &
          sleep 10
          curl -f http://localhost:4173 || exit 1
          pkill -f "npm run preview"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  # Final status check
  test-suite-complete:
    name: Test Suite Complete
    runs-on: ubuntu-latest
    needs: [
      lint-and-types,
      unit-tests,
      integration-tests,
      security-tests,
      performance-tests,
      e2e-tests,
      coverage-report,
      build-test
    ]
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "Test Suite Results:"
          echo "==================="
          
          # Check if any required job failed
          if [[ "${{ needs.lint-and-types.result }}" != "success" ]]; then
            echo "❌ Lint and type check failed"
            exit 1
          fi
          
          if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
            echo "❌ Unit tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.integration-tests.result }}" != "success" ]]; then
            echo "❌ Integration tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.security-tests.result }}" != "success" ]]; then
            echo "❌ Security tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.e2e-tests.result }}" != "success" ]]; then
            echo "❌ E2E tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.coverage-report.result }}" != "success" ]]; then
            echo "❌ Coverage requirements not met"
            exit 1
          fi
          
          if [[ "${{ needs.build-test.result }}" != "success" ]]; then
            echo "❌ Build test failed"
            exit 1
          fi
          
          # Performance tests are allowed to be less strict
          if [[ "${{ needs.performance-tests.result }}" != "success" ]]; then
            echo "⚠️  Performance tests had issues (non-blocking)"
          fi
          
          echo "✅ All critical tests passed!"
          echo "🚀 Ready for deployment"

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ **Test Suite Failed**\n\nOne or more critical tests failed. Please check the workflow logs and fix the issues before merging.'
            })

      - name: Notify on success
        if: success() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ **All Tests Passed!**\n\n🚀 This PR is ready for review and merge.\n\n**Test Results:**\n- ✅ Lint & Type Check\n- ✅ Unit Tests\n- ✅ Integration Tests\n- ✅ Security Tests\n- ✅ E2E Tests\n- ✅ Coverage Requirements\n- ✅ Build Test'

            })
