{"version":3,"file":"diagram-VMROVX33-Bjesl6ML.js","sources":["../node_modules/d3-hierarchy/src/hierarchy/count.js","../node_modules/d3-hierarchy/src/hierarchy/index.js","../node_modules/d3-hierarchy/src/constant.js","../node_modules/d3-hierarchy/src/treemap/round.js","../node_modules/d3-hierarchy/src/treemap/dice.js","../node_modules/d3-hierarchy/src/treemap/slice.js","../node_modules/d3-hierarchy/src/hierarchy/each.js","../node_modules/d3-hierarchy/src/hierarchy/eachAfter.js","../node_modules/d3-hierarchy/src/hierarchy/eachBefore.js","../node_modules/d3-hierarchy/src/hierarchy/find.js","../node_modules/d3-hierarchy/src/hierarchy/sum.js","../node_modules/d3-hierarchy/src/hierarchy/sort.js","../node_modules/d3-hierarchy/src/hierarchy/path.js","../node_modules/d3-hierarchy/src/hierarchy/ancestors.js","../node_modules/d3-hierarchy/src/hierarchy/descendants.js","../node_modules/d3-hierarchy/src/hierarchy/leaves.js","../node_modules/d3-hierarchy/src/hierarchy/links.js","../node_modules/d3-hierarchy/src/hierarchy/iterator.js","../node_modules/d3-hierarchy/src/treemap/squarify.js","../node_modules/d3-hierarchy/src/treemap/index.js","../node_modules/d3-hierarchy/src/accessors.js","../node_modules/mermaid/dist/chunks/mermaid.core/diagram-VMROVX33.mjs"],"sourcesContent":["function count(node) {\n  var sum = 0,\n      children = node.children,\n      i = children && children.length;\n  if (!i) sum = 1;\n  else while (--i >= 0) sum += children[i].value;\n  node.value = sum;\n}\n\nexport default function() {\n  return this.eachAfter(count);\n}\n","import node_count from \"./count.js\";\nimport node_each from \"./each.js\";\nimport node_eachBefore from \"./eachBefore.js\";\nimport node_eachAfter from \"./eachAfter.js\";\nimport node_find from \"./find.js\";\nimport node_sum from \"./sum.js\";\nimport node_sort from \"./sort.js\";\nimport node_path from \"./path.js\";\nimport node_ancestors from \"./ancestors.js\";\nimport node_descendants from \"./descendants.js\";\nimport node_leaves from \"./leaves.js\";\nimport node_links from \"./links.js\";\nimport node_iterator from \"./iterator.js\";\n\nexport default function hierarchy(data, children) {\n  if (data instanceof Map) {\n    data = [undefined, data];\n    if (children === undefined) children = mapChildren;\n  } else if (children === undefined) {\n    children = objectChildren;\n  }\n\n  var root = new Node(data),\n      node,\n      nodes = [root],\n      child,\n      childs,\n      i,\n      n;\n\n  while (node = nodes.pop()) {\n    if ((childs = children(node.data)) && (n = (childs = Array.from(childs)).length)) {\n      node.children = childs;\n      for (i = n - 1; i >= 0; --i) {\n        nodes.push(child = childs[i] = new Node(childs[i]));\n        child.parent = node;\n        child.depth = node.depth + 1;\n      }\n    }\n  }\n\n  return root.eachBefore(computeHeight);\n}\n\nfunction node_copy() {\n  return hierarchy(this).eachBefore(copyData);\n}\n\nfunction objectChildren(d) {\n  return d.children;\n}\n\nfunction mapChildren(d) {\n  return Array.isArray(d) ? d[1] : null;\n}\n\nfunction copyData(node) {\n  if (node.data.value !== undefined) node.value = node.data.value;\n  node.data = node.data.data;\n}\n\nexport function computeHeight(node) {\n  var height = 0;\n  do node.height = height;\n  while ((node = node.parent) && (node.height < ++height));\n}\n\nexport function Node(data) {\n  this.data = data;\n  this.depth =\n  this.height = 0;\n  this.parent = null;\n}\n\nNode.prototype = hierarchy.prototype = {\n  constructor: Node,\n  count: node_count,\n  each: node_each,\n  eachAfter: node_eachAfter,\n  eachBefore: node_eachBefore,\n  find: node_find,\n  sum: node_sum,\n  sort: node_sort,\n  path: node_path,\n  ancestors: node_ancestors,\n  descendants: node_descendants,\n  leaves: node_leaves,\n  links: node_links,\n  copy: node_copy,\n  [Symbol.iterator]: node_iterator\n};\n","export function constantZero() {\n  return 0;\n}\n\nexport default function(x) {\n  return function() {\n    return x;\n  };\n}\n","export default function(node) {\n  node.x0 = Math.round(node.x0);\n  node.y0 = Math.round(node.y0);\n  node.x1 = Math.round(node.x1);\n  node.y1 = Math.round(node.y1);\n}\n","export default function(parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      node,\n      i = -1,\n      n = nodes.length,\n      k = parent.value && (x1 - x0) / parent.value;\n\n  while (++i < n) {\n    node = nodes[i], node.y0 = y0, node.y1 = y1;\n    node.x0 = x0, node.x1 = x0 += node.value * k;\n  }\n}\n","export default function(parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      node,\n      i = -1,\n      n = nodes.length,\n      k = parent.value && (y1 - y0) / parent.value;\n\n  while (++i < n) {\n    node = nodes[i], node.x0 = x0, node.x1 = x1;\n    node.y0 = y0, node.y1 = y0 += node.value * k;\n  }\n}\n","export default function(callback, that) {\n  let index = -1;\n  for (const node of this) {\n    callback.call(that, node, ++index, this);\n  }\n  return this;\n}\n","export default function(callback, that) {\n  var node = this, nodes = [node], next = [], children, i, n, index = -1;\n  while (node = nodes.pop()) {\n    next.push(node);\n    if (children = node.children) {\n      for (i = 0, n = children.length; i < n; ++i) {\n        nodes.push(children[i]);\n      }\n    }\n  }\n  while (node = next.pop()) {\n    callback.call(that, node, ++index, this);\n  }\n  return this;\n}\n","export default function(callback, that) {\n  var node = this, nodes = [node], children, i, index = -1;\n  while (node = nodes.pop()) {\n    callback.call(that, node, ++index, this);\n    if (children = node.children) {\n      for (i = children.length - 1; i >= 0; --i) {\n        nodes.push(children[i]);\n      }\n    }\n  }\n  return this;\n}\n","export default function(callback, that) {\n  let index = -1;\n  for (const node of this) {\n    if (callback.call(that, node, ++index, this)) {\n      return node;\n    }\n  }\n}\n","export default function(value) {\n  return this.eachAfter(function(node) {\n    var sum = +value(node.data) || 0,\n        children = node.children,\n        i = children && children.length;\n    while (--i >= 0) sum += children[i].value;\n    node.value = sum;\n  });\n}\n","export default function(compare) {\n  return this.eachBefore(function(node) {\n    if (node.children) {\n      node.children.sort(compare);\n    }\n  });\n}\n","export default function(end) {\n  var start = this,\n      ancestor = leastCommonAncestor(start, end),\n      nodes = [start];\n  while (start !== ancestor) {\n    start = start.parent;\n    nodes.push(start);\n  }\n  var k = nodes.length;\n  while (end !== ancestor) {\n    nodes.splice(k, 0, end);\n    end = end.parent;\n  }\n  return nodes;\n}\n\nfunction leastCommonAncestor(a, b) {\n  if (a === b) return a;\n  var aNodes = a.ancestors(),\n      bNodes = b.ancestors(),\n      c = null;\n  a = aNodes.pop();\n  b = bNodes.pop();\n  while (a === b) {\n    c = a;\n    a = aNodes.pop();\n    b = bNodes.pop();\n  }\n  return c;\n}\n","export default function() {\n  var node = this, nodes = [node];\n  while (node = node.parent) {\n    nodes.push(node);\n  }\n  return nodes;\n}\n","export default function() {\n  return Array.from(this);\n}\n","export default function() {\n  var leaves = [];\n  this.eachBefore(function(node) {\n    if (!node.children) {\n      leaves.push(node);\n    }\n  });\n  return leaves;\n}\n","export default function() {\n  var root = this, links = [];\n  root.each(function(node) {\n    if (node !== root) { // Don’t include the root’s parent, if any.\n      links.push({source: node.parent, target: node});\n    }\n  });\n  return links;\n}\n","export default function*() {\n  var node = this, current, next = [node], children, i, n;\n  do {\n    current = next.reverse(), next = [];\n    while (node = current.pop()) {\n      yield node;\n      if (children = node.children) {\n        for (i = 0, n = children.length; i < n; ++i) {\n          next.push(children[i]);\n        }\n      }\n    }\n  } while (next.length);\n}\n","import treemapDice from \"./dice.js\";\nimport treemapSlice from \"./slice.js\";\n\nexport var phi = (1 + Math.sqrt(5)) / 2;\n\nexport function squarifyRatio(ratio, parent, x0, y0, x1, y1) {\n  var rows = [],\n      nodes = parent.children,\n      row,\n      nodeValue,\n      i0 = 0,\n      i1 = 0,\n      n = nodes.length,\n      dx, dy,\n      value = parent.value,\n      sumValue,\n      minValue,\n      maxValue,\n      newRatio,\n      minRatio,\n      alpha,\n      beta;\n\n  while (i0 < n) {\n    dx = x1 - x0, dy = y1 - y0;\n\n    // Find the next non-empty node.\n    do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);\n    minValue = maxValue = sumValue;\n    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\n    beta = sumValue * sumValue * alpha;\n    minRatio = Math.max(maxValue / beta, beta / minValue);\n\n    // Keep adding nodes while the aspect ratio maintains or improves.\n    for (; i1 < n; ++i1) {\n      sumValue += nodeValue = nodes[i1].value;\n      if (nodeValue < minValue) minValue = nodeValue;\n      if (nodeValue > maxValue) maxValue = nodeValue;\n      beta = sumValue * sumValue * alpha;\n      newRatio = Math.max(maxValue / beta, beta / minValue);\n      if (newRatio > minRatio) { sumValue -= nodeValue; break; }\n      minRatio = newRatio;\n    }\n\n    // Position and record the row orientation.\n    rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});\n    if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);\n    else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);\n    value -= sumValue, i0 = i1;\n  }\n\n  return rows;\n}\n\nexport default (function custom(ratio) {\n\n  function squarify(parent, x0, y0, x1, y1) {\n    squarifyRatio(ratio, parent, x0, y0, x1, y1);\n  }\n\n  squarify.ratio = function(x) {\n    return custom((x = +x) > 1 ? x : 1);\n  };\n\n  return squarify;\n})(phi);\n","import roundNode from \"./round.js\";\nimport squarify from \"./squarify.js\";\nimport {required} from \"../accessors.js\";\nimport constant, {constantZero} from \"../constant.js\";\n\nexport default function() {\n  var tile = squarify,\n      round = false,\n      dx = 1,\n      dy = 1,\n      paddingStack = [0],\n      paddingInner = constantZero,\n      paddingTop = constantZero,\n      paddingRight = constantZero,\n      paddingBottom = constantZero,\n      paddingLeft = constantZero;\n\n  function treemap(root) {\n    root.x0 =\n    root.y0 = 0;\n    root.x1 = dx;\n    root.y1 = dy;\n    root.eachBefore(positionNode);\n    paddingStack = [0];\n    if (round) root.eachBefore(roundNode);\n    return root;\n  }\n\n  function positionNode(node) {\n    var p = paddingStack[node.depth],\n        x0 = node.x0 + p,\n        y0 = node.y0 + p,\n        x1 = node.x1 - p,\n        y1 = node.y1 - p;\n    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n    node.x0 = x0;\n    node.y0 = y0;\n    node.x1 = x1;\n    node.y1 = y1;\n    if (node.children) {\n      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;\n      x0 += paddingLeft(node) - p;\n      y0 += paddingTop(node) - p;\n      x1 -= paddingRight(node) - p;\n      y1 -= paddingBottom(node) - p;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      tile(node, x0, y0, x1, y1);\n    }\n  }\n\n  treemap.round = function(x) {\n    return arguments.length ? (round = !!x, treemap) : round;\n  };\n\n  treemap.size = function(x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];\n  };\n\n  treemap.tile = function(x) {\n    return arguments.length ? (tile = required(x), treemap) : tile;\n  };\n\n  treemap.padding = function(x) {\n    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();\n  };\n\n  treemap.paddingInner = function(x) {\n    return arguments.length ? (paddingInner = typeof x === \"function\" ? x : constant(+x), treemap) : paddingInner;\n  };\n\n  treemap.paddingOuter = function(x) {\n    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();\n  };\n\n  treemap.paddingTop = function(x) {\n    return arguments.length ? (paddingTop = typeof x === \"function\" ? x : constant(+x), treemap) : paddingTop;\n  };\n\n  treemap.paddingRight = function(x) {\n    return arguments.length ? (paddingRight = typeof x === \"function\" ? x : constant(+x), treemap) : paddingRight;\n  };\n\n  treemap.paddingBottom = function(x) {\n    return arguments.length ? (paddingBottom = typeof x === \"function\" ? x : constant(+x), treemap) : paddingBottom;\n  };\n\n  treemap.paddingLeft = function(x) {\n    return arguments.length ? (paddingLeft = typeof x === \"function\" ? x : constant(+x), treemap) : paddingLeft;\n  };\n\n  return treemap;\n}\n","export function optional(f) {\n  return f == null ? null : required(f);\n}\n\nexport function required(f) {\n  if (typeof f !== \"function\") throw new Error;\n  return f;\n}\n","import {\n  setupViewPortForSVG\n} from \"./chunk-SKB7J2MH.mjs\";\nimport {\n  isLabelStyle,\n  styles2String\n} from \"./chunk-UWXLY5YG.mjs\";\nimport {\n  populateCommonDb\n} from \"./chunk-353BL4L5.mjs\";\nimport {\n  cleanAndMerge\n} from \"./chunk-55PJQP7W.mjs\";\nimport {\n  selectSvgElement\n} from \"./chunk-P3VETL53.mjs\";\nimport {\n  __name,\n  clear,\n  configureSvgSize,\n  defaultConfig_default,\n  getAccDescription,\n  getAccTitle,\n  getConfig,\n  getDiagramTitle,\n  log,\n  setAccDescription,\n  setAccTitle,\n  setDiagramTitle\n} from \"./chunk-3XYRH5AP.mjs\";\n\n// src/diagrams/treemap/db.ts\nvar TreeMapDB = class {\n  constructor() {\n    this.nodes = [];\n    this.levels = /* @__PURE__ */ new Map();\n    this.outerNodes = [];\n    this.classes = /* @__PURE__ */ new Map();\n    this.setAccTitle = setAccTitle;\n    this.getAccTitle = getAccTitle;\n    this.setDiagramTitle = setDiagramTitle;\n    this.getDiagramTitle = getDiagramTitle;\n    this.getAccDescription = getAccDescription;\n    this.setAccDescription = setAccDescription;\n  }\n  static {\n    __name(this, \"TreeMapDB\");\n  }\n  getNodes() {\n    return this.nodes;\n  }\n  getConfig() {\n    const defaultConfig = defaultConfig_default;\n    const userConfig = getConfig();\n    return cleanAndMerge({\n      ...defaultConfig.treemap,\n      ...userConfig.treemap ?? {}\n    });\n  }\n  addNode(node, level) {\n    this.nodes.push(node);\n    this.levels.set(node, level);\n    if (level === 0) {\n      this.outerNodes.push(node);\n      this.root ??= node;\n    }\n  }\n  getRoot() {\n    return { name: \"\", children: this.outerNodes };\n  }\n  addClass(id, _style) {\n    const styleClass = this.classes.get(id) ?? { id, styles: [], textStyles: [] };\n    const styles = _style.replace(/\\\\,/g, \"\\xA7\\xA7\\xA7\").replace(/,/g, \";\").replace(/§§§/g, \",\").split(\";\");\n    if (styles) {\n      styles.forEach((s) => {\n        if (isLabelStyle(s)) {\n          if (styleClass?.textStyles) {\n            styleClass.textStyles.push(s);\n          } else {\n            styleClass.textStyles = [s];\n          }\n        }\n        if (styleClass?.styles) {\n          styleClass.styles.push(s);\n        } else {\n          styleClass.styles = [s];\n        }\n      });\n    }\n    this.classes.set(id, styleClass);\n  }\n  getClasses() {\n    return this.classes;\n  }\n  getStylesForClass(classSelector) {\n    return this.classes.get(classSelector)?.styles ?? [];\n  }\n  clear() {\n    clear();\n    this.nodes = [];\n    this.levels = /* @__PURE__ */ new Map();\n    this.outerNodes = [];\n    this.classes = /* @__PURE__ */ new Map();\n    this.root = void 0;\n  }\n};\n\n// src/diagrams/treemap/parser.ts\nimport { parse } from \"@mermaid-js/parser\";\n\n// src/diagrams/treemap/utils.ts\nfunction buildHierarchy(items) {\n  if (!items.length) {\n    return [];\n  }\n  const root = [];\n  const stack = [];\n  items.forEach((item) => {\n    const node = {\n      name: item.name,\n      children: item.type === \"Leaf\" ? void 0 : []\n    };\n    node.classSelector = item?.classSelector;\n    if (item?.cssCompiledStyles) {\n      node.cssCompiledStyles = [item.cssCompiledStyles];\n    }\n    if (item.type === \"Leaf\" && item.value !== void 0) {\n      node.value = item.value;\n    }\n    while (stack.length > 0 && stack[stack.length - 1].level >= item.level) {\n      stack.pop();\n    }\n    if (stack.length === 0) {\n      root.push(node);\n    } else {\n      const parent = stack[stack.length - 1].node;\n      if (parent.children) {\n        parent.children.push(node);\n      } else {\n        parent.children = [node];\n      }\n    }\n    if (item.type !== \"Leaf\") {\n      stack.push({ node, level: item.level });\n    }\n  });\n  return root;\n}\n__name(buildHierarchy, \"buildHierarchy\");\n\n// src/diagrams/treemap/parser.ts\nvar populate = /* @__PURE__ */ __name((ast, db) => {\n  populateCommonDb(ast, db);\n  const items = [];\n  for (const row of ast.TreemapRows ?? []) {\n    if (row.$type === \"ClassDefStatement\") {\n      db.addClass(row.className ?? \"\", row.styleText ?? \"\");\n    }\n  }\n  for (const row of ast.TreemapRows ?? []) {\n    const item = row.item;\n    if (!item) {\n      continue;\n    }\n    const level = row.indent ? parseInt(row.indent) : 0;\n    const name = getItemName(item);\n    const styles = item.classSelector ? db.getStylesForClass(item.classSelector) : [];\n    const cssCompiledStyles = styles.length > 0 ? styles.join(\";\") : void 0;\n    const itemData = {\n      level,\n      name,\n      type: item.$type,\n      value: item.value,\n      classSelector: item.classSelector,\n      cssCompiledStyles\n    };\n    items.push(itemData);\n  }\n  const hierarchyNodes = buildHierarchy(items);\n  const addNodesRecursively = /* @__PURE__ */ __name((nodes, level) => {\n    for (const node of nodes) {\n      db.addNode(node, level);\n      if (node.children && node.children.length > 0) {\n        addNodesRecursively(node.children, level + 1);\n      }\n    }\n  }, \"addNodesRecursively\");\n  addNodesRecursively(hierarchyNodes, 0);\n}, \"populate\");\nvar getItemName = /* @__PURE__ */ __name((item) => {\n  return item.name ? String(item.name) : \"\";\n}, \"getItemName\");\nvar parser = {\n  // @ts-expect-error - TreeMapDB is not assignable to DiagramDB\n  parser: { yy: void 0 },\n  parse: /* @__PURE__ */ __name(async (text) => {\n    try {\n      const parseFunc = parse;\n      const ast = await parseFunc(\"treemap\", text);\n      log.debug(\"Treemap AST:\", ast);\n      const db = parser.parser?.yy;\n      if (!(db instanceof TreeMapDB)) {\n        throw new Error(\n          \"parser.parser?.yy was not a TreemapDB. This is due to a bug within Mermaid, please report this issue at https://github.com/mermaid-js/mermaid/issues.\"\n        );\n      }\n      populate(ast, db);\n    } catch (error) {\n      log.error(\"Error parsing treemap:\", error);\n      throw error;\n    }\n  }, \"parse\")\n};\n\n// src/diagrams/treemap/renderer.ts\nimport { scaleOrdinal, treemap, hierarchy, format, select } from \"d3\";\nvar DEFAULT_INNER_PADDING = 10;\nvar SECTION_INNER_PADDING = 10;\nvar SECTION_HEADER_HEIGHT = 25;\nvar draw = /* @__PURE__ */ __name((_text, id, _version, diagram2) => {\n  const treemapDb = diagram2.db;\n  const config = treemapDb.getConfig();\n  const treemapInnerPadding = config.padding ?? DEFAULT_INNER_PADDING;\n  const title = treemapDb.getDiagramTitle();\n  const root = treemapDb.getRoot();\n  const { themeVariables } = getConfig();\n  if (!root) {\n    return;\n  }\n  const titleHeight = title ? 30 : 0;\n  const svg = selectSvgElement(id);\n  const width = config.nodeWidth ? config.nodeWidth * SECTION_INNER_PADDING : 960;\n  const height = config.nodeHeight ? config.nodeHeight * SECTION_INNER_PADDING : 500;\n  const svgWidth = width;\n  const svgHeight = height + titleHeight;\n  svg.attr(\"viewBox\", `0 0 ${svgWidth} ${svgHeight}`);\n  configureSvgSize(svg, svgHeight, svgWidth, config.useMaxWidth);\n  let valueFormat;\n  try {\n    const formatStr = config.valueFormat || \",\";\n    if (formatStr === \"$0,0\") {\n      valueFormat = /* @__PURE__ */ __name((value) => \"$\" + format(\",\")(value), \"valueFormat\");\n    } else if (formatStr.startsWith(\"$\") && formatStr.includes(\",\")) {\n      const precision = /\\.\\d+/.exec(formatStr);\n      const precisionStr = precision ? precision[0] : \"\";\n      valueFormat = /* @__PURE__ */ __name((value) => \"$\" + format(\",\" + precisionStr)(value), \"valueFormat\");\n    } else if (formatStr.startsWith(\"$\")) {\n      const restOfFormat = formatStr.substring(1);\n      valueFormat = /* @__PURE__ */ __name((value) => \"$\" + format(restOfFormat || \"\")(value), \"valueFormat\");\n    } else {\n      valueFormat = format(formatStr);\n    }\n  } catch (error) {\n    log.error(\"Error creating format function:\", error);\n    valueFormat = format(\",\");\n  }\n  const colorScale = scaleOrdinal().range([\n    \"transparent\",\n    themeVariables.cScale0,\n    themeVariables.cScale1,\n    themeVariables.cScale2,\n    themeVariables.cScale3,\n    themeVariables.cScale4,\n    themeVariables.cScale5,\n    themeVariables.cScale6,\n    themeVariables.cScale7,\n    themeVariables.cScale8,\n    themeVariables.cScale9,\n    themeVariables.cScale10,\n    themeVariables.cScale11\n  ]);\n  const colorScalePeer = scaleOrdinal().range([\n    \"transparent\",\n    themeVariables.cScalePeer0,\n    themeVariables.cScalePeer1,\n    themeVariables.cScalePeer2,\n    themeVariables.cScalePeer3,\n    themeVariables.cScalePeer4,\n    themeVariables.cScalePeer5,\n    themeVariables.cScalePeer6,\n    themeVariables.cScalePeer7,\n    themeVariables.cScalePeer8,\n    themeVariables.cScalePeer9,\n    themeVariables.cScalePeer10,\n    themeVariables.cScalePeer11\n  ]);\n  const colorScaleLabel = scaleOrdinal().range([\n    themeVariables.cScaleLabel0,\n    themeVariables.cScaleLabel1,\n    themeVariables.cScaleLabel2,\n    themeVariables.cScaleLabel3,\n    themeVariables.cScaleLabel4,\n    themeVariables.cScaleLabel5,\n    themeVariables.cScaleLabel6,\n    themeVariables.cScaleLabel7,\n    themeVariables.cScaleLabel8,\n    themeVariables.cScaleLabel9,\n    themeVariables.cScaleLabel10,\n    themeVariables.cScaleLabel11\n  ]);\n  if (title) {\n    svg.append(\"text\").attr(\"x\", svgWidth / 2).attr(\"y\", titleHeight / 2).attr(\"class\", \"treemapTitle\").attr(\"text-anchor\", \"middle\").attr(\"dominant-baseline\", \"middle\").text(title);\n  }\n  const g = svg.append(\"g\").attr(\"transform\", `translate(0, ${titleHeight})`).attr(\"class\", \"treemapContainer\");\n  const hierarchyRoot = hierarchy(root).sum((d) => d.value ?? 0).sort((a, b) => (b.value ?? 0) - (a.value ?? 0));\n  const treemapLayout = treemap().size([width, height]).paddingTop(\n    (d) => d.children && d.children.length > 0 ? SECTION_HEADER_HEIGHT + SECTION_INNER_PADDING : 0\n  ).paddingInner(treemapInnerPadding).paddingLeft((d) => d.children && d.children.length > 0 ? SECTION_INNER_PADDING : 0).paddingRight((d) => d.children && d.children.length > 0 ? SECTION_INNER_PADDING : 0).paddingBottom((d) => d.children && d.children.length > 0 ? SECTION_INNER_PADDING : 0).round(true);\n  const treemapData = treemapLayout(hierarchyRoot);\n  const branchNodes = treemapData.descendants().filter((d) => d.children && d.children.length > 0);\n  const sections = g.selectAll(\".treemapSection\").data(branchNodes).enter().append(\"g\").attr(\"class\", \"treemapSection\").attr(\"transform\", (d) => `translate(${d.x0},${d.y0})`);\n  sections.append(\"rect\").attr(\"width\", (d) => d.x1 - d.x0).attr(\"height\", SECTION_HEADER_HEIGHT).attr(\"class\", \"treemapSectionHeader\").attr(\"fill\", \"none\").attr(\"fill-opacity\", 0.6).attr(\"stroke-width\", 0.6).attr(\"style\", (d) => {\n    if (d.depth === 0) {\n      return \"display: none;\";\n    }\n    return \"\";\n  });\n  sections.append(\"clipPath\").attr(\"id\", (_d, i) => `clip-section-${id}-${i}`).append(\"rect\").attr(\"width\", (d) => Math.max(0, d.x1 - d.x0 - 12)).attr(\"height\", SECTION_HEADER_HEIGHT);\n  sections.append(\"rect\").attr(\"width\", (d) => d.x1 - d.x0).attr(\"height\", (d) => d.y1 - d.y0).attr(\"class\", (_d, i) => {\n    return `treemapSection section${i}`;\n  }).attr(\"fill\", (d) => colorScale(d.data.name)).attr(\"fill-opacity\", 0.6).attr(\"stroke\", (d) => colorScalePeer(d.data.name)).attr(\"stroke-width\", 2).attr(\"stroke-opacity\", 0.4).attr(\"style\", (d) => {\n    if (d.depth === 0) {\n      return \"display: none;\";\n    }\n    const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n    return styles.nodeStyles + \";\" + styles.borderStyles.join(\";\");\n  });\n  sections.append(\"text\").attr(\"class\", \"treemapSectionLabel\").attr(\"x\", 6).attr(\"y\", SECTION_HEADER_HEIGHT / 2).attr(\"dominant-baseline\", \"middle\").text((d) => d.depth === 0 ? \"\" : d.data.name).attr(\"font-weight\", \"bold\").attr(\"style\", (d) => {\n    if (d.depth === 0) {\n      return \"display: none;\";\n    }\n    const labelStyles = \"dominant-baseline: middle; font-size: 12px; fill:\" + colorScaleLabel(d.data.name) + \"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;\";\n    const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n    return labelStyles + styles.labelStyles.replace(\"color:\", \"fill:\");\n  }).each(function(d) {\n    if (d.depth === 0) {\n      return;\n    }\n    const self = select(this);\n    const originalText = d.data.name;\n    self.text(originalText);\n    const totalHeaderWidth = d.x1 - d.x0;\n    const labelXPosition = 6;\n    let spaceForTextContent;\n    if (config.showValues !== false && d.value) {\n      const valueEndsAtXRelative = totalHeaderWidth - 10;\n      const estimatedValueTextActualWidth = 30;\n      const gapBetweenLabelAndValue = 10;\n      const labelMustEndBeforeX = valueEndsAtXRelative - estimatedValueTextActualWidth - gapBetweenLabelAndValue;\n      spaceForTextContent = labelMustEndBeforeX - labelXPosition;\n    } else {\n      const labelOwnRightPadding = 6;\n      spaceForTextContent = totalHeaderWidth - labelXPosition - labelOwnRightPadding;\n    }\n    const minimumWidthToDisplay = 15;\n    const actualAvailableWidth = Math.max(minimumWidthToDisplay, spaceForTextContent);\n    const textNode = self.node();\n    const currentTextContentLength = textNode.getComputedTextLength();\n    if (currentTextContentLength > actualAvailableWidth) {\n      const ellipsis = \"...\";\n      let currentTruncatedText = originalText;\n      while (currentTruncatedText.length > 0) {\n        currentTruncatedText = originalText.substring(0, currentTruncatedText.length - 1);\n        if (currentTruncatedText.length === 0) {\n          self.text(ellipsis);\n          if (textNode.getComputedTextLength() > actualAvailableWidth) {\n            self.text(\"\");\n          }\n          break;\n        }\n        self.text(currentTruncatedText + ellipsis);\n        if (textNode.getComputedTextLength() <= actualAvailableWidth) {\n          break;\n        }\n      }\n    }\n  });\n  if (config.showValues !== false) {\n    sections.append(\"text\").attr(\"class\", \"treemapSectionValue\").attr(\"x\", (d) => d.x1 - d.x0 - 10).attr(\"y\", SECTION_HEADER_HEIGHT / 2).attr(\"text-anchor\", \"end\").attr(\"dominant-baseline\", \"middle\").text((d) => d.value ? valueFormat(d.value) : \"\").attr(\"font-style\", \"italic\").attr(\"style\", (d) => {\n      if (d.depth === 0) {\n        return \"display: none;\";\n      }\n      const labelStyles = \"text-anchor: end; dominant-baseline: middle; font-size: 10px; fill:\" + colorScaleLabel(d.data.name) + \"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;\";\n      const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n      return labelStyles + styles.labelStyles.replace(\"color:\", \"fill:\");\n    });\n  }\n  const leafNodes = treemapData.leaves();\n  const cell = g.selectAll(\".treemapLeafGroup\").data(leafNodes).enter().append(\"g\").attr(\"class\", (d, i) => {\n    return `treemapNode treemapLeafGroup leaf${i}${d.data.classSelector ? ` ${d.data.classSelector}` : \"\"}x`;\n  }).attr(\"transform\", (d) => `translate(${d.x0},${d.y0})`);\n  cell.append(\"rect\").attr(\"width\", (d) => d.x1 - d.x0).attr(\"height\", (d) => d.y1 - d.y0).attr(\"class\", \"treemapLeaf\").attr(\"fill\", (d) => {\n    return d.parent ? colorScale(d.parent.data.name) : colorScale(d.data.name);\n  }).attr(\"style\", (d) => {\n    const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n    return styles.nodeStyles;\n  }).attr(\"fill-opacity\", 0.3).attr(\"stroke\", (d) => {\n    return d.parent ? colorScale(d.parent.data.name) : colorScale(d.data.name);\n  }).attr(\"stroke-width\", 3);\n  cell.append(\"clipPath\").attr(\"id\", (_d, i) => `clip-${id}-${i}`).append(\"rect\").attr(\"width\", (d) => Math.max(0, d.x1 - d.x0 - 4)).attr(\"height\", (d) => Math.max(0, d.y1 - d.y0 - 4));\n  const leafLabels = cell.append(\"text\").attr(\"class\", \"treemapLabel\").attr(\"x\", (d) => (d.x1 - d.x0) / 2).attr(\"y\", (d) => (d.y1 - d.y0) / 2).attr(\"style\", (d) => {\n    const labelStyles = \"text-anchor: middle; dominant-baseline: middle; font-size: 38px;fill:\" + colorScaleLabel(d.data.name) + \";\";\n    const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n    return labelStyles + styles.labelStyles.replace(\"color:\", \"fill:\");\n  }).attr(\"clip-path\", (_d, i) => `url(#clip-${id}-${i})`).text((d) => d.data.name);\n  leafLabels.each(function(d) {\n    const self = select(this);\n    const nodeWidth = d.x1 - d.x0;\n    const nodeHeight = d.y1 - d.y0;\n    const textNode = self.node();\n    const padding = 4;\n    const availableWidth = nodeWidth - 2 * padding;\n    const availableHeight = nodeHeight - 2 * padding;\n    if (availableWidth < 10 || availableHeight < 10) {\n      self.style(\"display\", \"none\");\n      return;\n    }\n    let currentLabelFontSize = parseInt(self.style(\"font-size\"), 10);\n    const minLabelFontSize = 8;\n    const originalValueRelFontSize = 28;\n    const valueScaleFactor = 0.6;\n    const minValueFontSize = 6;\n    const spacingBetweenLabelAndValue = 2;\n    while (textNode.getComputedTextLength() > availableWidth && currentLabelFontSize > minLabelFontSize) {\n      currentLabelFontSize--;\n      self.style(\"font-size\", `${currentLabelFontSize}px`);\n    }\n    let prospectiveValueFontSize = Math.max(\n      minValueFontSize,\n      Math.min(originalValueRelFontSize, Math.round(currentLabelFontSize * valueScaleFactor))\n    );\n    let combinedHeight = currentLabelFontSize + spacingBetweenLabelAndValue + prospectiveValueFontSize;\n    while (combinedHeight > availableHeight && currentLabelFontSize > minLabelFontSize) {\n      currentLabelFontSize--;\n      prospectiveValueFontSize = Math.max(\n        minValueFontSize,\n        Math.min(originalValueRelFontSize, Math.round(currentLabelFontSize * valueScaleFactor))\n      );\n      if (prospectiveValueFontSize < minValueFontSize && currentLabelFontSize === minLabelFontSize) {\n        break;\n      }\n      self.style(\"font-size\", `${currentLabelFontSize}px`);\n      combinedHeight = currentLabelFontSize + spacingBetweenLabelAndValue + prospectiveValueFontSize;\n      if (prospectiveValueFontSize <= minValueFontSize && combinedHeight > availableHeight) {\n      }\n    }\n    self.style(\"font-size\", `${currentLabelFontSize}px`);\n    if (textNode.getComputedTextLength() > availableWidth || currentLabelFontSize < minLabelFontSize || availableHeight < currentLabelFontSize) {\n      self.style(\"display\", \"none\");\n    }\n  });\n  if (config.showValues !== false) {\n    const leafValues = cell.append(\"text\").attr(\"class\", \"treemapValue\").attr(\"x\", (d) => (d.x1 - d.x0) / 2).attr(\"y\", function(d) {\n      return (d.y1 - d.y0) / 2;\n    }).attr(\"style\", (d) => {\n      const labelStyles = \"text-anchor: middle; dominant-baseline: hanging; font-size: 28px;fill:\" + colorScaleLabel(d.data.name) + \";\";\n      const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n      return labelStyles + styles.labelStyles.replace(\"color:\", \"fill:\");\n    }).attr(\"clip-path\", (_d, i) => `url(#clip-${id}-${i})`).text((d) => d.value ? valueFormat(d.value) : \"\");\n    leafValues.each(function(d) {\n      const valueTextElement = select(this);\n      const parentCellNode = this.parentNode;\n      if (!parentCellNode) {\n        valueTextElement.style(\"display\", \"none\");\n        return;\n      }\n      const labelElement = select(parentCellNode).select(\".treemapLabel\");\n      if (labelElement.empty() || labelElement.style(\"display\") === \"none\") {\n        valueTextElement.style(\"display\", \"none\");\n        return;\n      }\n      const finalLabelFontSize = parseFloat(labelElement.style(\"font-size\"));\n      const originalValueFontSize = 28;\n      const valueScaleFactor = 0.6;\n      const minValueFontSize = 6;\n      const spacingBetweenLabelAndValue = 2;\n      const actualValueFontSize = Math.max(\n        minValueFontSize,\n        Math.min(originalValueFontSize, Math.round(finalLabelFontSize * valueScaleFactor))\n      );\n      valueTextElement.style(\"font-size\", `${actualValueFontSize}px`);\n      const labelCenterY = (d.y1 - d.y0) / 2;\n      const valueTopActualY = labelCenterY + finalLabelFontSize / 2 + spacingBetweenLabelAndValue;\n      valueTextElement.attr(\"y\", valueTopActualY);\n      const nodeWidth = d.x1 - d.x0;\n      const nodeTotalHeight = d.y1 - d.y0;\n      const cellBottomPadding = 4;\n      const maxValueBottomY = nodeTotalHeight - cellBottomPadding;\n      const availableWidthForValue = nodeWidth - 2 * 4;\n      if (valueTextElement.node().getComputedTextLength() > availableWidthForValue || valueTopActualY + actualValueFontSize > maxValueBottomY || actualValueFontSize < minValueFontSize) {\n        valueTextElement.style(\"display\", \"none\");\n      } else {\n        valueTextElement.style(\"display\", null);\n      }\n    });\n  }\n  const diagramPadding = config.diagramPadding ?? 8;\n  setupViewPortForSVG(svg, diagramPadding, \"flowchart\", config?.useMaxWidth || false);\n}, \"draw\");\nvar getClasses = /* @__PURE__ */ __name(function(_text, diagramObj) {\n  return diagramObj.db.getClasses();\n}, \"getClasses\");\nvar renderer = { draw, getClasses };\n\n// src/diagrams/treemap/styles.ts\nvar defaultTreemapStyleOptions = {\n  sectionStrokeColor: \"black\",\n  sectionStrokeWidth: \"1\",\n  sectionFillColor: \"#efefef\",\n  leafStrokeColor: \"black\",\n  leafStrokeWidth: \"1\",\n  leafFillColor: \"#efefef\",\n  labelColor: \"black\",\n  labelFontSize: \"12px\",\n  valueFontSize: \"10px\",\n  valueColor: \"black\",\n  titleColor: \"black\",\n  titleFontSize: \"14px\"\n};\nvar getStyles = /* @__PURE__ */ __name(({\n  treemap: treemap2\n} = {}) => {\n  const options = cleanAndMerge(defaultTreemapStyleOptions, treemap2);\n  return `\n  .treemapNode.section {\n    stroke: ${options.sectionStrokeColor};\n    stroke-width: ${options.sectionStrokeWidth};\n    fill: ${options.sectionFillColor};\n  }\n  .treemapNode.leaf {\n    stroke: ${options.leafStrokeColor};\n    stroke-width: ${options.leafStrokeWidth};\n    fill: ${options.leafFillColor};\n  }\n  .treemapLabel {\n    fill: ${options.labelColor};\n    font-size: ${options.labelFontSize};\n  }\n  .treemapValue {\n    fill: ${options.valueColor};\n    font-size: ${options.valueFontSize};\n  }\n  .treemapTitle {\n    fill: ${options.titleColor};\n    font-size: ${options.titleFontSize};\n  }\n  `;\n}, \"getStyles\");\nvar styles_default = getStyles;\n\n// src/diagrams/treemap/diagram.ts\nvar diagram = {\n  parser,\n  get db() {\n    return new TreeMapDB();\n  },\n  renderer,\n  styles: styles_default\n};\nexport {\n  diagram\n};\n"],"names":["count","node","sum","children","i","length","value","hierarchy","data","Map","undefined","mapChildren","objectChildren","child","childs","n","root","Node","nodes","pop","Array","from","push","parent","depth","eachBefore","computeHeight","d","isArray","copyData","height","this","constantZero","constant","x","roundNode","x0","Math","round","y0","x1","y1","treemapDice","k","treemapSlice","prototype","constructor","eachAfter","each","callback","that","index","call","next","find","sort","compare","path","end","start","ancestor","a","b","aNodes","ancestors","bNodes","c","leastCommonAncestor","splice","descendants","leaves","links","source","target","copy","Symbol","iterator","current","reverse","squarify","custom","ratio","row","nodeValue","dx","dy","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","rows","i0","i1","max","dice","slice","squarifyRatio","sqrt","treemap","tile","paddingStack","paddingInner","paddingTop","paddingRight","paddingBottom","paddingLeft","positionNode","p","arguments","size","f","Error","required","padding","paddingOuter","TreeMapDB","levels","outerNodes","classes","setAccTitle","getAccTitle","setDiagramTitle","getDiagramTitle","getAccDescription","setAccDescription","__name","getNodes","getConfig","defaultConfig","defaultConfig_default","userConfig","cleanAndMerge","addNode","level","set","getRoot","name","addClass","id","_style","styleClass","get","styles","textStyles","replace","split","forEach","s","isLabelStyle","getClasses","getStylesForClass","classSelector","clear","buildHierarchy","items","stack","item","type","cssCompiledStyles","populate","ast","db","populateCommonDb","TreemapRows","$type","className","styleText","indent","parseInt","getItemName","join","itemData","hierarchyNodes","addNodesRecursively","String","parser","yy","parse","async","text","parseFunc","log","debug","error","SECTION_INNER_PADDING","renderer","draw","_text","_version","diagram2","treemapDb","config","treemapInnerPadding","title","themeVariables","titleHeight","svg","selectSvgElement","width","nodeWidth","nodeHeight","svgWidth","svgHeight","valueFormat","attr","configureSvgSize","useMaxWidth","formatStr","format","startsWith","includes","precision","exec","precisionStr","restOfFormat","substring","colorScale","scaleOrdinal","range","cScale0","cScale1","cScale2","cScale3","cScale4","cScale5","cScale6","cScale7","cScale8","cScale9","cScale10","cScale11","colorScalePeer","cScalePeer0","cScalePeer1","cScalePeer2","cScalePeer3","cScalePeer4","cScalePeer5","cScalePeer6","cScalePeer7","cScalePeer8","cScalePeer9","cScalePeer10","cScalePeer11","colorScaleLabel","cScaleLabel0","cScaleLabel1","cScaleLabel2","cScaleLabel3","cScaleLabel4","cScaleLabel5","cScaleLabel6","cScaleLabel7","cScaleLabel8","cScaleLabel9","cScaleLabel10","cScaleLabel11","append","g","hierarchyRoot","treemapData","SECTION_HEADER_HEIGHT","treemapLayout","branchNodes","filter","sections","selectAll","enter","_d","styles2String","nodeStyles","borderStyles","labelStyles","self","select","originalText","totalHeaderWidth","spaceForTextContent","showValues","actualAvailableWidth","textNode","getComputedTextLength","ellipsis","currentTruncatedText","leafNodes","cell","availableWidth","availableHeight","style","currentLabelFontSize","prospectiveValueFontSize","min","combinedHeight","valueTextElement","parentCellNode","parentNode","labelElement","empty","finalLabelFontSize","parseFloat","actualValueFontSize","valueTopActualY","maxValueBottomY","availableWidthForValue","diagramPadding","setupViewPortForSVG","diagramObj","defaultTreemapStyleOptions","sectionStrokeColor","sectionStrokeWidth","sectionFillColor","leafStrokeColor","leafStrokeWidth","leafFillColor","labelColor","labelFontSize","valueFontSize","valueColor","titleColor","titleFontSize","styles_default","treemap2","options","diagram"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]}